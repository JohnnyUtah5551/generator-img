import os
import logging
import replicate
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
)
from deep_translator import GoogleTranslator

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
RENDER_URL = os.getenv("RENDER_URL", "https://generator-img-1.onrender.com")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook")
ADMIN_ID = os.getenv("ADMIN_ID")

# === –ö–ª–∏–µ–Ω—Ç Replicate ===
replicate_client = replicate.Client(api_token=REPLICATE_API_KEY)

# === –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
users = {}  # user_id -> {"balance": int, "used": int}

FREE_GENERATIONS = 3
GEN_COST = 2  # 2‚≠ê –∑–∞ 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

PACKAGES = {
    "10": 20,   # 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = 20‚≠ê
    "50": 100,  # 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = 100‚≠ê
    "100": 200, # 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = 200‚≠ê
}

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {"balance": FREE_GENERATIONS, "used": 0}
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Nano Banana üçå (Google Gemini 2.5 Flash)**.\n\n"
        f"–£ —Ç–µ–±—è {FREE_GENERATIONS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
        "–ù–∞–ø–∏—à–∏ /generate –∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ 1‚Äì4 —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º."
    )

# === –ë–∞–ª–∞–Ω—Å ===
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.get(user_id, {"balance": 0, "used": 0})
    await update.message.reply_text(
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user['balance']}\n"
        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user['used']}"
    )

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ + —Ñ–æ—Ç–æ ===
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.get(user_id, {"balance": FREE_GENERATIONS, "used": 0})
    prompt = " ".join(context.args)

    if not prompt:
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /generate")
        return

    if user["balance"] <= 0:
        await update.message.reply_text("‚ö†Ô∏è –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ö—É–ø–∏ –µ—â—ë —á–µ—Ä–µ–∑ /buy")
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    translated_prompt = GoogleTranslator(source="auto", target="en").translate(prompt)

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        output = replicate_client.run(
            "google/nano-banana:latest",
            input={"prompt": translated_prompt}
        )
        img_url = output[0]

        await update.message.reply_photo(photo=img_url)
        user["balance"] -= 1
        user["used"] += 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ===
async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users.get(user_id, {"balance": FREE_GENERATIONS, "used": 0})
    photos = update.message.photo
    caption = update.message.caption

    if not caption:
        await update.message.reply_text("‚úçÔ∏è –î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ.")
        return

    if user["balance"] <= 0:
        await update.message.reply_text("‚ö†Ô∏è –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ö—É–ø–∏ –µ—â—ë —á–µ—Ä–µ–∑ /buy")
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
    translated_prompt = GoogleTranslator(source="auto", target="en").translate(caption)

    # –ë–µ—Ä—ë–º –¥–æ 4 —Ñ–æ—Ç–æ
    photo_files = []
    for photo in photos[:4]:
        file = await context.bot.get_file(photo.file_id)
        photo_files.append(file.file_path)

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        output = replicate_client.run(
            "google/nano-banana:latest",
            input={"prompt": translated_prompt, "image": photo_files}
        )
        for img in output:
            await update.message.reply_photo(photo=img)

        user["balance"] -= 1
        user["used"] += 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ñ–æ—Ç–æ): {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# === –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ===
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 20‚≠ê", callback_data="buy_10")],
        [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 100‚≠ê", callback_data="buy_50")],
        [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_100")],
    ]
    await update.message.reply_text("üõí –í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))

async def buy_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data.split("_")[1]
    stars = PACKAGES[choice]
    await query.message.reply_invoice(
        title=f"–ü–∞–∫–µ—Ç {choice} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {choice} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.",
        payload=f"buy_{choice}",
        provider_token="",  # Telegram Stars ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
        currency="XTR",
        prices=[LabeledPrice(label=f"{choice} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", amount=stars)],
        start_parameter="test",
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    payload = update.message.successful_payment.invoice_payload
    amount = int(payload.split("_")[1])
    users[user_id]["balance"] += int(amount)
    await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!")

# === Main ===
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("generate", generate))
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(CallbackQueryHandler(buy_button, pattern="^buy_"))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photos))

    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 5000)),
        url_path=WEBHOOK_PATH,
        webhook_url=f"{RENDER_URL}/{WEBHOOK_PATH}",
    )

if __name__ == "__main__":
    main()
