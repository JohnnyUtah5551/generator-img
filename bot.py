# bot.py ‚Äî –≤–µ—Ä—Å–∏—è 1.5
# –¶–µ–ª—å: –æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª 1.4 + –¥–æ–±–∞–≤–∏—Ç—å SQLite, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç, –º–µ–Ω—é.
import os
import logging
import sqlite3
import asyncio
import json
from datetime import datetime, timedelta, time, timezone
from typing import Optional, Tuple, List

import aiohttp
from deep_translator import GoogleTranslator

# replicate –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ dev, –ø–æ—ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç –≤ try
try:
    import replicate
except Exception:
    replicate = None

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    PreCheckoutQueryHandler,
)

# -------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (env)
# -------------------------
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.environ.get("REPLICATE_API_KEY")
REPLICATE_MODEL = os.environ.get("REPLICATE_MODEL", "")  # optional
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0") or 0)
RENDER_URL = os.environ.get("RENDER_URL")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL") or os.environ.get("RENDER_EXTERNAL_URL") or os.environ.get("RENDER_URL")
PORT = int(os.environ.get("PORT", "8443"))
DB_PATH = os.environ.get("DB_PATH", "bot.db")  # later –º–æ–∂–Ω–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å volume –∏ –∑–∞–¥–∞—Ç—å /var/lib/bot-data/bot.db

# settings
PROMPT_MAX_LEN = int(os.environ.get("PROMPT_MAX_LEN", "4000"))
COST_PER_IMAGE = int(os.environ.get("COST_PER_IMAGE", "1"))
COST_PER_TEXT = int(os.environ.get("COST_PER_TEXT", "0"))

# Daily report: 12:00 Moscow (UTC+3) => 09:00 UTC
DAILY_REPORT_UTC_TIME = time(hour=9, minute=0, tzinfo=timezone.utc)

# -------------------------
# –õ–æ–≥–∏
# -------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# -------------------------
# DB: schema + helpers
# -------------------------
INIT_SQL = """
PRAGMA foreign_keys = ON;

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0,
    total_generations INTEGER DEFAULT 0,
    last_active TEXT
);

CREATE TABLE IF NOT EXISTS generations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    prompt TEXT,
    type TEXT,
    result_url TEXT,
    created_at TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
"""

def init_db():
    conn = sqlite3.connect(DB_PATH)
    try:
        conn.executescript(INIT_SQL)
        conn.commit()
    finally:
        conn.close()
    logger.info("DB initialized at %s", DB_PATH)

# run blocking DB operations in background thread
async def db_run(func, *args, **kwargs):
    return await asyncio.to_thread(func, *args, **kwargs)

# synchronous DB functions:

def _get_user_sync(user_id: int) -> Optional[Tuple]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("SELECT user_id, username, balance, total_generations, last_active FROM users WHERE user_id = ?", (user_id,))
        return cur.fetchone()
    finally:
        conn.close()

def _create_user_sync(user_id: int, username: Optional[str]):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("INSERT OR IGNORE INTO users (user_id, username, last_active) VALUES (?, ?, ?)",
                    (user_id, username, datetime.utcnow().isoformat()))
        conn.commit()
    finally:
        conn.close()

def _update_last_active_sync(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("UPDATE users SET last_active = ? WHERE user_id = ?", (datetime.utcnow().isoformat(), user_id))
        conn.commit()
    finally:
        conn.close()

def _adjust_balance_sync(user_id: int, delta: int) -> Optional[int]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (delta, user_id))
        conn.commit()
        cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None
    finally:
        conn.close()

def _log_generation_sync(user_id: int, prompt: str, typ: str, result_url: str):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("INSERT INTO generations (user_id, prompt, type, result_url, created_at) VALUES (?, ?, ?, ?, ?)",
                    (user_id, prompt, typ, result_url, datetime.utcnow().isoformat()))
        cur.execute("UPDATE users SET total_generations = total_generations + 1, last_active = ? WHERE user_id = ?",
                    (datetime.utcnow().isoformat(), user_id))
        conn.commit()
    finally:
        conn.close()

def _daily_stats_between_sync(start_iso: str, end_iso: str) -> Tuple[int, int, List[Tuple[int,int]]]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM generations WHERE created_at >= ? AND created_at < ?", (start_iso, end_iso))
        total = cur.fetchone()[0]
        cur.execute("SELECT COUNT(DISTINCT user_id) FROM generations WHERE created_at >= ? AND created_at < ?", (start_iso, end_iso))
        unique = cur.fetchone()[0]
        cur.execute("SELECT user_id, COUNT(*) as c FROM generations WHERE created_at >= ? AND created_at < ? GROUP BY user_id ORDER BY c DESC LIMIT 5", (start_iso, end_iso))
        top = cur.fetchall()
        return total, unique, top
    finally:
        conn.close()

def _get_top_users_sync(limit: int = 10) -> List[Tuple[int,int]]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("SELECT user_id, total_generations FROM users ORDER BY total_generations DESC LIMIT ?", (limit,))
        return cur.fetchall()
    finally:
        conn.close()

# -------------------------
# Image generation: Replicate (if configured) -> fallback to RENDER_URL HTTP
# -------------------------
async def generate_image_via_http(prompt: str) -> Tuple[bool, str]:
    if not RENDER_URL:
        return False, "RENDER_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    headers = {"Content-Type": "application/json"}
    payload = {"prompt": prompt}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(RENDER_URL, json=payload, headers=headers, timeout=60) as resp:
                text = await resp.text()
                if resp.status != 200:
                    logger.error("Render returned %s: %s", resp.status, text)
                    return False, f"Render error {resp.status}"
                data = await resp.json()
                for k in ("url", "result_url", "image_url", "output", "outputs"):
                    if k in data:
                        val = data[k]
                        if isinstance(val, list) and val:
                            if isinstance(val[0], dict):
                                for key in ("url", "image_url", "result_url"):
                                    if key in val[0]:
                                        return True, val[0][key]
                            if isinstance(val[0], str):
                                return True, val[0]
                        else:
                            if isinstance(val, str):
                                return True, val
                            if isinstance(val, dict):
                                for key in ("url", "image_url", "result_url"):
                                    if key in val:
                                        return True, val[key]
                return False, json.dumps(data)[:1500]
    except asyncio.TimeoutError:
        return False, "Timeout –ø—Ä–∏ –≤—ã–∑–æ–≤–µ RENDER_URL"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ generate_image_via_http")
        return False, str(e)

async def generate_image(prompt: str) -> Tuple[bool, str]:
    # Try replicate if configured and library available
    if REPLICATE_API_KEY and replicate:
        try:
            client = replicate.Client(api_token=REPLICATE_API_KEY)
            model = REPLICATE_MODEL or None
            if model:
                output = client.run(model, input={"prompt": prompt})
            else:
                # default model id; adjust to what you used in 1.4 if needed
                default_model = "stability-ai/stable-diffusion"
                output = client.run(default_model, input={"prompt": prompt})
            if isinstance(output, list) and output:
                return True, output[0]
            if isinstance(output, str):
                return True, output
            if isinstance(output, dict):
                for k in ("url", "image_url", "result_url"):
                    if k in output:
                        return True, output[k]
            return False, "Unexpected response from Replicate"
        except Exception as e:
            logger.exception("Replicate error, falling back to HTTP: %s", e)
    # fallback to HTTP endpoint
    return await generate_image_via_http(prompt)

# -------------------------
# Admin notifications (text + image)
# -------------------------
async def notify_admin_about_generation(context: ContextTypes.DEFAULT_TYPE, user_id: int, username: Optional[str], prompt: str, result: str, typ: str):
    if not ADMIN_ID:
        return
    header = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or 'none'} (id:{user_id})\n‚è± {datetime.utcnow().isoformat()} UTC\n–¢–∏–ø: {typ}\n\n–ü—Ä–æ–º—Ç:\n{prompt}\n\n"
    try:
        lower = (result or "").lower()
        if lower.startswith("http") and any(ext in lower for ext in [".png", ".jpg", ".jpeg", ".webp", ".gif"]):
            await context.bot.send_message(chat_id=ADMIN_ID, text=header + "–†–µ–∑—É–ª—å—Ç–∞—Ç: (—Å–º. —Ñ–æ—Ç–æ –Ω–∏–∂–µ)")
            await context.bot.send_photo(chat_id=ADMIN_ID, photo=result)
        else:
            preview = result if len(result) < 1400 else result[:1400] + "..."
            await context.bot.send_message(chat_id=ADMIN_ID, text=header + f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{preview}")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

# -------------------------
# Menu (reply keyboard) ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
# -------------------------
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üèÜ –¢–æ–ø"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True,
)

# -------------------------
# Handlers: start, menu, help, balance, top
# -------------------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await db_run(_create_user_sync, user.id, user.username or "")
    await db_run(_update_last_active_sync, user.id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—é:", reply_markup=MAIN_MENU)

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º—Ç ‚Äî –±–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É (—Å–ø–∏—à–µ—Ç—Å—è 1‚≠ê).\n"
        "‚Ä¢ ¬´üí∞ –ë–∞–ª–∞–Ω—Å¬ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–≤—ë–∑–¥—ã.\n"
        "‚Ä¢ ¬´üèÜ –¢–æ–ø¬ª ‚Äî –ª–∏–¥–µ—Ä—ã –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º.\n"
        "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)."
    )
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def balance_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    row = await db_run(_get_user_sync, user.id)
    if row:
        _, username, balance, total_generations, last_active = row
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {balance}‚≠ê\n–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total_generations}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏ /start", reply_markup=MAIN_MENU)

async def top_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top = await db_run(_get_top_users_sync, 10)
    if not top:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", reply_markup=MAIN_MENU)
        return
    lines = ["üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: –≥–µ–Ω–µ—Ä–∞—Ü–∏–π):"]
    for uid, cnt in top:
        lines.append(f"{uid}: {cnt}")
    await update.message.reply_text("\n".join(lines), reply_markup=MAIN_MENU)

# -------------------------
# Text message handler: treat text as prompt (as in 1.4)
# -------------------------
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    text = msg.text.strip()

    # If user clicked menu buttons, route appropriately
    if text in ("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "Generate"):
        await msg.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç ‚Äî —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É. –ú–∞–∫—Å–∏–º—É–º {} —Å–∏–º–≤–æ–ª–æ–≤.".format(PROMPT_MAX_LEN), reply_markup=ReplyKeyboardRemove())
        return
    if text in ("üí∞ –ë–∞–ª–∞–Ω—Å", "–ë–∞–ª–∞–Ω—Å"):
        return await balance_handler(update, context)
    if text in ("üèÜ –¢–æ–ø", "–¢–æ–ø"):
        return await top_handler(update, context)
    if text in ("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "–ü–æ–º–æ—â—å", "Help"):
        return await help_handler(update, context)

    user = update.effective_user
    prompt = text
    # prompt length check
    if len(prompt) > PROMPT_MAX_LEN:
        await msg.reply_text(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º—Ç ‚Äî –º–∞–∫—Å–∏–º—É–º {PROMPT_MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # Ensure user in DB
    await db_run(_create_user_sync, user.id, user.username or "")
    await db_run(_update_last_active_sync, user.id)
    row = await db_run(_get_user_sync, user.id)
    if not row:
        await msg.reply_text("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ.")
        return
    _, _, balance, _, _ = row

    if balance is None or balance < COST_PER_IMAGE:
        await msg.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # Deduct cost
    await db_run(_adjust_balance_sync, user.id, -COST_PER_IMAGE)
    await msg.reply_text("–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")

    # Optional translate
    try:
        prompt_for_model = GoogleTranslator(source="auto", target="en").translate(prompt)
    except Exception:
        prompt_for_model = prompt

    success, result = await generate_image(prompt_for_model if prompt_for_model else prompt)
    if not success:
        # refund
        await db_run(_adjust_balance_sync, user.id, COST_PER_IMAGE)
        await msg.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result}", reply_markup=MAIN_MENU)
        return

    # Log generation
    await db_run(_log_generation_sync, user.id, prompt, "image", result)

    # Send result to user
    try:
        lower = (result or "").lower()
        if lower.startswith("http") and any(ext in lower for ext in [".png", ".jpg", ".jpeg", ".webp", ".gif"]):
            await context.bot.send_photo(chat_id=user.id, photo=result, caption="–ì–æ—Ç–æ–≤–æ ‚Äî –≤–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=MAIN_MENU)
        else:
            await msg.reply_text(f"–ì–æ—Ç–æ–≤–æ ‚Äî –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}", reply_markup=MAIN_MENU)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    # Notify admin
    await notify_admin_about_generation(context, user.id, user.username or "", prompt, result, "image")

# -------------------------
# Payment hooks (placeholders) ‚Äî keep integration point with Stars/payments
# -------------------------
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    payload = update.message.successful_payment.invoice_payload
    try:
        if payload and payload.startswith("topup:"):
            amount = int(payload.split(":", 1)[1])
            await db_run(_adjust_balance_sync, user.id, amount)
            await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚≠ê. –°–ø–∞—Å–∏–±–æ!")
        else:
            await db_run(_adjust_balance_sync, user.id, 1)
            await update.message.reply_text("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã")
        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")

# -------------------------
# Daily report job
# -------------------------
async def daily_report_job(context: ContextTypes.DEFAULT_TYPE):
    # Moscow date range -> convert to UTC range for DB (we store UTC timestamps)
    now_utc = datetime.now(timezone.utc)
    moscow_now = now_utc.astimezone(timezone(timedelta(hours=3)))
    moscow_date = moscow_now.date()
    moscow_start = datetime(moscow_date.year, moscow_date.month, moscow_date.day, 0, 0, 0, tzinfo=timezone(timedelta(hours=3)))
    moscow_end = moscow_start + timedelta(days=1)
    utc_start = (moscow_start.astimezone(timezone.utc)).replace(tzinfo=None)
    utc_end = (moscow_end.astimezone(timezone.utc)).replace(tzinfo=None)
    start_iso = utc_start.isoformat()
    end_iso = utc_end.isoformat()

    total, unique, top = await db_run(_daily_stats_between_sync, start_iso, end_iso)
    lines = [
        f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {moscow_date.isoformat()} (–ú–æ—Å–∫–≤–∞, UTC+3):",
        f"–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total}",
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique}",
    ]
    if top:
        lines.append("–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):")
        for uid, cnt in top:
            lines.append(f"{uid}: {cnt}")
    text = "\n".join(lines)
    try:
        if ADMIN_ID:
            await context.bot.send_message(chat_id=ADMIN_ID, text=text)
        logger.info("Daily report sent for %s", moscow_date.isoformat())
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É")

# -------------------------
# Startup and webhook run
# -------------------------
def main():
    init_db()
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Register handlers
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("balance", balance_handler))
    app.add_handler(CommandHandler("top", top_handler))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))

    # Payment handlers (if you use Telegram Payments / Stars)
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    # Schedule daily report at 09:00 UTC == 12:00 MSK
    app.job_queue.run_daily(daily_report_job, time=DAILY_REPORT_UTC_TIME)

    # Webhook URL must be provided (WEBHOOK_URL or Render provides RENDER_EXTERNAL_URL)
    if not WEBHOOK_URL:
        logger.error("WEBHOOK_URL / RENDER_EXTERNAL_URL / RENDER_URL not set. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL.")
        raise RuntimeError("WEBHOOK_URL not configured")

    public_base = WEBHOOK_URL.rstrip("/")
    webhook_full = f"{public_base}/{TELEGRAM_BOT_TOKEN}"

    logger.info("Starting webhook listener on 0.0.0.0:%s -> webhook %s", PORT, webhook_full)
    app.run_webhook(listen="0.0.0.0", port=PORT, url_path=TELEGRAM_BOT_TOKEN, webhook_url=webhook_full)

if __name__ == "__main__":
    main()

