import os
import re
import json
import logging
from datetime import datetime, date
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    PreCheckoutQueryHandler,
    MessageHandler,
    filters,
    JobQueue,
)
import replicate
from deep_translator import GoogleTranslator

# ==========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==========================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==========================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==========================
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
PORT = int(os.environ.get("PORT", 5000))

RENDER_URL = os.getenv("RENDER_URL") or os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")  # —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Telegram

ADMIN_ID = 641377565  # —Ç–≤–æ–π Telegram ID

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not REPLICATE_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω REPLICATE_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not RENDER_URL:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω RENDER_URL –∏–ª–∏ RENDER_EXTERNAL_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ==========================
# –ö–ª–∏–µ–Ω—Ç Replicate
# ==========================
client = replicate.Client(api_token=REPLICATE_API_KEY)

# ==========================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ usage
# ==========================
USAGE_FILE = "usage.json"
STATS_FILE = "stats.json"
FREE_LIMIT = 3

def load_json(filename):
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_json(filename, data):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

user_usage = load_json(USAGE_FILE)
stats = load_json(STATS_FILE)

def increment_stat(key, amount=1):
    today = str(date.today())
    if today not in stats:
        stats[today] = {"generations": 0, "purchases": 0}
    stats[today][key] += amount
    save_json(STATS_FILE, stats)

# ==========================
# –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞ –∏ NSFW
# ==========================
BANNED_WORDS = [
    "—Ö—É–π", "–ø–∏–∑–¥", "–µ–±–∞", "–±–ª—è–¥", "—Å—É–∫–∞", "fuck", "shit", "nigger", "cunt",
    "porn", "sex", "xxx", "nsfw"
]

def contains_profanity(text: str) -> bool:
    text_lower = text.lower()
    for word in BANNED_WORDS:
        if re.search(rf"\b{word}\b", text_lower):
            return True
    return False

def translate_to_english(text: str) -> str:
    try:
        return GoogleTranslator(source="auto", target="en").translate(text)
    except Exception:
        return text

# ==========================
# –ö–æ–º–∞–Ω–¥—ã
# ==========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if user_id not in user_usage:
        user_usage[user_id] = FREE_LIMIT
        save_json(USAGE_FILE, user_usage)

    balance = user_usage.get(user_id, 0)

    keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        f"–£ —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–Ω–æ *{balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π* ‚ú®\n"
        "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ Telegram Stars ‚≠êÔ∏è\n\n"
        "üëâ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/generate —Ç–µ–∫—Å—Ç`\n"
        "üëâ –£–∑–Ω–∞–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ `/balance`\n"
        "üëâ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏, —è –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üåç",
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    balance = user_usage.get(user_id, 0)
    await update.message.reply_text(f"üí∞ –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å *{balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π*.", parse_mode="Markdown")

async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "–±–µ–∑ –Ω–∏–∫–∞"
    balance = user_usage.get(user_id, 0)

    if balance <= 0:
        await update.message.reply_text(
            "üö´ –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!\n\n"
            "‚≠êÔ∏è –ö—É–ø–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/buy`"
        )
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/generate —Ç–µ–∫—Å—Ç_–æ–ø–∏—Å–∞–Ω–∏—è`", parse_mode="Markdown")
        return

    user_prompt = " ".join(context.args)
    logger.info(f"User {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–º–ø—Ç: {user_prompt}")

    if contains_profanity(user_prompt):
        await update.message.reply_text("üö´ –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.")
        return

    if len(user_prompt) > 200:
        user_prompt = user_prompt[:200]
        await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –¥–ª–∏–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:\n`{user_prompt}`", parse_mode="Markdown")

    prompt = translate_to_english(user_prompt)

    await update.message.reply_text(f"üåç –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: `{prompt}`\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", parse_mode="Markdown")

    try:
        output = client.run(
            "stability-ai/stable-diffusion:d70beb400d223e6432425a5299910329c6050c6abcf97b8c70537d6a1fcb269a",
            input={
                "prompt": prompt,
                "num_inference_steps": 30,
                "guidance_scale": 7.5,
                "width": 512,
                "height": 512,
            },
        )

        new_balance = max(0, balance - 1)
        user_usage[user_id] = new_balance
        save_json(USAGE_FILE, user_usage)
        increment_stat("generations")

        if isinstance(output, list):
            for url in output:
                await update.message.reply_photo(photo=url)
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=url,
                    caption=(
                        f"üì∏ –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})\n"
                        f"üìù –ü—Ä–æ–º–ø—Ç: {user_prompt}\n"
                        f"üåç –ü–µ—Ä–µ–≤–æ–¥: {prompt}\n"
                        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {new_balance}"
                    ),
                )
        elif isinstance(output, str):
            await update.message.reply_photo(photo=output)
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=output,
                caption=(
                    f"üì∏ –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})\n"
                    f"üìù –ü—Ä–æ–º–ø—Ç: {user_prompt}\n"
                    f"üåç –ü–µ—Ä–µ–≤–æ–¥: {prompt}\n"
                    f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {new_balance}"
                ),
            )
        else:
            await update.message.reply_text(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {output}")

        await update.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å *{new_balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π*.",
            parse_mode="Markdown",
        )

    except Exception as e:
        error_text = str(e)

        if "insufficient credit" in error_text.lower():
            await update.message.reply_text(
                "‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ú—ã —Å–∫–æ—Ä–æ –ø–æ–ø–æ–ª–Ω–∏–º –±–∞–ª–∞–Ω—Å üöÄ"
            )
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=(
                    f"‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –≤ Replicate!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})\n"
                    f"üìù –ü—Ä–æ–º–ø—Ç: {user_prompt}\n"
                    f"üåç –ü–µ—Ä–µ–≤–æ–¥: {prompt}\n"
                    f"üí≥ –û—à–∏–±–∫–∞: {error_text}"
                ),
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ú—ã —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º.")
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞ —É {user_id} (@{username}): {error_text}"
            )

# ==========================
# –û–ø–ª–∞—Ç–∞
# ==========================
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not PROVIDER_TOKEN:
        await update.message.reply_text("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
        return

    keyboard = [
        [InlineKeyboardButton("‚≠êÔ∏è –ö—É–ø–∏—Ç—å 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", callback_data="buy_10")],
        [InlineKeyboardButton("üåü –ö—É–ø–∏—Ç—å 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", callback_data="buy_100")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=reply_markup)

async def buy_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "buy_10":
        prices = [LabeledPrice("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 100 * 10)]
        await query.message.reply_invoice(
            title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            description="–ü–∞–∫–µ—Ç –∏–∑ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
            provider_token=PROVIDER_TOKEN,
            currency="XTR",
            prices=prices,
            payload="buy_generations_10",
        )

    elif query.data == "buy_100":
        prices = [LabeledPrice("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 100 * 100)]
        await query.message.reply_invoice(
            title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            description="–ü–∞–∫–µ—Ç –∏–∑ 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
            provider_token=PROVIDER_TOKEN,
            currency="XTR",
            prices=prices,
            payload="buy_generations_100",
        )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    payload = update.message.successful_payment.invoice_payload

    if payload == "buy_generations_10":
        added = 10
    elif payload == "buy_generations_100":
        added = 100
    else:
        added = 0

    user_usage[user_id] = user_usage.get(user_id, 0) + added
    save_json(USAGE_FILE, user_usage)
    increment_stat("purchases")
    await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")

# ==========================
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# ==========================
async def send_daily_stats(context: ContextTypes.DEFAULT_TYPE):
    today = str(date.today())
    today_stats = stats.get(today, {"generations": 0, "purchases": 0})

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today}:\n\n"
        f"üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {today_stats['generations']}\n"
        f"‚≠êÔ∏è –ü–æ–∫—É–ø–æ–∫: {today_stats['purchases']}\n"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = str(date.today())
    today_stats = stats.get(today, {"generations": 0, "purchases": 0})
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today}:\n\n"
        f"üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {today_stats['generations']}\n"
        f"‚≠êÔ∏è –ü–æ–∫—É–ø–æ–∫: {today_stats['purchases']}\n"
    )
    await update.message.reply_text(text)

# ==========================
# Inline –∫–Ω–æ–ø–∫–∞
# ==========================
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "generate":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏ `/generate —Ç–µ–∫—Å—Ç`, —á—Ç–æ–±—ã —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É!")

# ==========================
# Main
# ==========================
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("generate", generate))
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CallbackQueryHandler(buy_button, pattern="^buy_"))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    job_queue: JobQueue = application.job_queue
    job_queue.run_daily(send_daily_stats, time=datetime.strptime("23:59", "%H:%M").time())

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=f"{RENDER_URL}/{WEBHOOK_PATH}",
    )

if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    main()
