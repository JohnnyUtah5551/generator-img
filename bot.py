import os
import logging
import sqlite3
import replicate
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# -------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# -------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# -------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# -------------------
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
MODEL_ID = "google/nano-banana"
GENERATION_COST = 4  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∑–≤—ë–∑–¥–∞—Ö
DB_PATH = "users.db"

# -------------------
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´
# -------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        """CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 3,
            last_image_url TEXT
        )"""
    )
    conn.commit()
    conn.close()


def get_user(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT balance, last_image_url FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if not row:
        cur.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 3))
        conn.commit()
        row = (3, None)
    conn.close()
    return row


def update_balance(user_id: int, new_balance: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
    conn.commit()
    conn.close()


def update_last_image(user_id: int, url: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE users SET last_image_url = ? WHERE user_id = ?", (url, user_id))
    conn.commit()
    conn.close()


# -------------------
# –ö–ù–û–ü–ö–ò
# -------------------
def main_menu():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy")],
        ]
    )


def after_generation_menu():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="regenerate")],
            [InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="finish")],
        ]
    )


# -------------------
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    init_db()
    user = update.effective_user
    balance, _ = get_user(user.id)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é —Å–∞–º–æ–π –º–æ—â–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ "
        "**Google Nano Banana üçå**.\n\n"
        f"‚ú® –£ —Ç–µ–±—è {balance} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
        "üí´ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –µ—â—ë —á–µ—Ä–µ–∑ Telegram Stars.",
        reply_markup=main_menu(),
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "balance":
        balance, _ = get_user(query.from_user.id)
        await query.message.reply_text(f"üí∞ –£ —Ç–µ–±—è {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", reply_markup=main_menu())

    elif query.data == "buy":
        await query.message.reply_text(
            "üõí –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Telegram Stars –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=main_menu(),
        )

    elif query.data == "generate":
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    user_id = update.effective_user.id
    balance, last_image = get_user(user_id)

    if balance < GENERATION_COST:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.", reply_markup=main_menu())
        return

    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        output = replicate.run(
            f"{MODEL_ID}:latest",
            input={"prompt": prompt, "num_outputs": 1},
        )
        image_url = output[0]
        update_last_image(user_id, image_url)
        update_balance(user_id, balance - GENERATION_COST)

        await update.message.reply_photo(
            image_url,
            caption="‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë.",
            reply_markup=after_generation_menu(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_menu())


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance, _ = get_user(user_id)

    if balance < GENERATION_COST:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.", reply_markup=main_menu())
        return

    photo = update.message.photo[-1]
    file = await photo.get_file()
    file_path = f"/tmp/{user_id}.jpg"
    await file.download_to_drive(file_path)

    prompt = update.message.caption
    if not prompt:
        await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        context.user_data["pending_photo"] = file_path
        return

    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        with open(file_path, "rb") as f:
            output = replicate.run(
                f"{MODEL_ID}:latest",
                input={"prompt": prompt, "image": f, "num_outputs": 1},
            )
        image_url = output[0]
        update_last_image(user_id, image_url)
        update_balance(user_id, balance - GENERATION_COST)

        await update.message.reply_photo(
            image_url,
            caption="‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë.",
            reply_markup=after_generation_menu(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ñ–æ—Ç–æ): {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_menu())


async def regenerate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance, last_image = get_user(user_id)

    if not last_image:
        await update.callback_query.message.reply_text("‚ùå –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", reply_markup=main_menu())
        return

    if balance < GENERATION_COST:
        await update.callback_query.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.", reply_markup=main_menu())
        return

    await update.callback_query.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞...")

    try:
        output = replicate.run(
            f"{MODEL_ID}:latest",
            input={"image": last_image, "num_outputs": 1},
        )
        image_url = output[0]
        update_last_image(user_id, image_url)
        update_balance(user_id, balance - GENERATION_COST)

        await update.callback_query.message.reply_photo(
            image_url,
            caption="‚úÖ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤!\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë.",
            reply_markup=after_generation_menu(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", reply_markup=main_menu())


async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu())


# -------------------
# MAIN
# -------------------
def main():
    init_db()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN is not set")

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(balance|buy|generate)$"))
    app.add_handler(CallbackQueryHandler(regenerate, pattern="^regenerate$"))
    app.add_handler(CallbackQueryHandler(finish, pattern="^finish$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()


if __name__ == "__main__":
    main()


