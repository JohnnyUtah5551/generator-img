import os
import json
import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    filters,
)
import replicate

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PROVIDER_TOKEN = ""  # Telegram Stars –Ω–µ —Ç—Ä–µ–±—É—é—Ç provider_token

# –§–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
BALANCES_FILE = "balances.json"

def load_balances():
    if os.path.exists(BALANCES_FILE):
        try:
            with open(BALANCES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}
    return {}

def save_balances():
    try:
        with open(BALANCES_FILE, "w", encoding="utf-8") as f:
            json.dump(user_balances, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")

# –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balances = load_balances()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
MAIN_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
    [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="buy")],
    [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
])

# –ü–∞–∫–µ—Ç—ã –ø–æ–∫—É–ø–æ–∫
PRICES = {
    "buy_10": {"amount": 10, "price": 40},   # 40‚≠ê
    "buy_50": {"amount": 50, "price": 200},  # 200‚≠ê
    "buy_100": {"amount": 100, "price": 400} # 400‚≠ê
}

# –•–µ–Ω–¥–ª–µ—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if str(user_id) not in user_balances:
        user_balances[str(user_id)] = 3  # 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        save_balances()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Nano Banana (Google Gemini 2.5 Flash).\n\n"
        "‚ú® –£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
        reply_markup=MAIN_MENU,
    )

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "generate":
        await query.message.reply_text(
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ.\n\n"
            "–î–ª—è –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç Google Gemini 2.5 Flash ‚Äî –æ–Ω–∞ –∂–µ Nano Banana üçå\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"
        )
        await query.message.delete()

    elif query.data == "buy":
        keyboard = [
            [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10")],
            [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50")],
            [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100")],
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "balance":
        user_id = str(query.from_user.id)
        balance = user_balances.get(user_id, 0)
        await query.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")

    elif query.data == "help":
        await query.message.reply_text(
            "‚ùì –ü–æ–º–æ—â—å\n\n"
            "‚Äî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ 1‚Äì4 —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.\n"
            "‚Äî –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Google Gemini 2.5 Flash (Nano Banana).\n"
            "‚Äî –£ –≤–∞—Å –µ—Å—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–∞–ª–µ–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ‚≠ê."
        )

# –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
async def buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    package = query.data

    if package not in PRICES:
        return

    price_data = PRICES[package]
    title = f"{price_data['amount']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {price_data['amount']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    payload = package
    currency = "XTR"  # Stars
    prices = [LabeledPrice("–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏", price_data["price"])]

    await context.bot.send_invoice(
        chat_id=query.from_user.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
    )

async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    payload = update.message.successful_payment.invoice_payload

    if payload in PRICES:
        user_balances[user_id] = user_balances.get(user_id, 0) + PRICES[payload]["amount"]
        save_balances()
        await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.", reply_markup=MAIN_MENU)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    balance = user_balances.get(user_id, 0)

    if balance <= 0:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –º–µ–Ω—é.")
        return

    prompt = update.message.text or update.message.caption
    photos = update.message.photo

    if photos and not prompt:
        await update.message.reply_text("üì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    user_balances[user_id] = balance - 1
    save_balances()

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... (Nano Banana —á–µ—Ä–µ–∑ Replicate)")
    try:
        client = replicate.Client(api_token=REPLICATE_API_KEY)
        output = client.run(
            "google/nano-banana:latest",
            input={"prompt": prompt}
        )
        if output and isinstance(output, list):
            await update.message.reply_photo(photo=output[0])
            keyboard = [
                [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="generate"),
                 InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="menu")],
            ]
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ:",
                                            reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_callback, pattern="^(generate|buy|balance|help|menu)$"))
    application.add_handler(CallbackQueryHandler(buy_handler, pattern="^(buy_10|buy_50|buy_100)$"))
    application.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
