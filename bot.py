import os
import logging
import requests
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    InputMediaPhoto,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)
import replicate
from deep_translator import GoogleTranslator

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PORT = int(os.environ.get("PORT", 5000))
RENDER_URL = os.getenv("RENDER_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook")

FREE_GENERATIONS = 3

client = replicate.Client(api_token=REPLICATE_API_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_generations = {}
user_purchases = {}
daily_stats = {"purchases": 0, "generations": 0}
user_photos = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ 4 —Ñ–æ—Ç–æ

# === –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞ ===
BAD_WORDS = ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Å—É–∫–∞", "–±–ª—è—Ç—å", "—Ö—É–π", "fuck", "shit"]

def clean_prompt(prompt: str) -> str:
    text = prompt.lower()
    for word in BAD_WORDS:
        text = text.replace(word, "***")
    return text

# === –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ ===
def translate_prompt(prompt: str) -> str:
    try:
        return GoogleTranslator(source="auto", target="en").translate(prompt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return prompt

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Replicate ===
def get_replicate_balance():
    try:
        url = "https://api.replicate.com/v1/account"
        headers = {"Authorization": f"Token {REPLICATE_API_KEY}"}
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data.get("credits", {}).get("usd_cents", 0) / 100
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Replicate: {e}")
        return None

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ===
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str):
    balance = get_replicate_balance()
    balance_text = f"\nüí∞ –ë–∞–ª–∞–Ω—Å Replicate: {balance:.2f}$" if balance is not None else ""
    await context.bot.send_message(chat_id=ADMIN_ID, text=message + balance_text)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate")]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ú–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –±–æ–ª—å—à–µ —á–µ—Ä–µ–∑ /buy\n"
        "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 4 —Ñ–æ—Ç–æ –∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ===
async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file_id = update.message.photo[-1].file_id
    file = await context.bot.get_file(file_id)
    url = file.file_path

    if user_id not in user_photos:
        user_photos[user_id] = []
    if len(user_photos[user_id]) < 4:
        user_photos[user_id].append(url)
        await update.message.reply_text(f"üì∏ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ({len(user_photos[user_id])}/4).")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 4 —Ñ–æ—Ç–æ.")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ===
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    count = user_generations.get(user_id, FREE_GENERATIONS)
    if count <= 0:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π /buy")
        return

    prompt = " ".join(context.args) if context.args else "A futuristic city with flying cars"
    prompt = clean_prompt(prompt)
    translated_prompt = translate_prompt(prompt)

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        inputs = {"prompt": translated_prompt}
        if user_id in user_photos and user_photos[user_id]:
            inputs["image"] = user_photos[user_id]

        output = client.run(
            "google-deepmind/nano-banana:latest",
            input=inputs,
        )

        if isinstance(output, list):
            media = [InputMediaPhoto(url) for url in output]
            await update.message.reply_media_group(media)
        elif isinstance(output, str):
            await update.message.reply_photo(photo=output)

        user_generations[user_id] = count - 1
        daily_stats["generations"] += 1
        user_photos[user_id] = []  # –æ—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        await notify_admin(
            context,
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id})\n"
            f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}\n"
            f"üéØ –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_generations[user_id]}",
        )

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º!")
        await notify_admin(
            context,
            f"‚ùå –û—à–∏–±–∫–∞ —É @{username} (ID: {user_id})\n–ü—Ä–æ–º–ø—Ç: {prompt}\n–û—à–∏–±–∫–∞: {e}",
        )

# === –ë–∞–ª–∞–Ω—Å ===
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = user_generations.get(user_id, FREE_GENERATIONS)
    await update.message.reply_text(f"üìä –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")

# === –ü–æ–∫—É–ø–∫–∏ ===
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 20‚≠ê", callback_data="buy_10")],
        [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 100‚≠ê", callback_data="buy_50")],
        [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π - 200‚≠ê", callback_data="buy_100")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def buy_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "buy_10":
        prices = [LabeledPrice("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 20)]
        amount = 10
    elif query.data == "buy_50":
        prices = [LabeledPrice("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 100)]
        amount = 50
    else:
        prices = [LabeledPrice("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", 200)]
        amount = 100

    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title="–ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        description="–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars",
        payload=f"buy_{amount}",
        provider_token="",  # –≤—Å—Ç–∞–≤–∏—à—å provider_token –æ—Ç Telegram Stars
        currency="XTR",
        prices=prices,
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    payload = update.message.successful_payment.invoice_payload
    if "buy_" in payload:
        amount = int(payload.split("_")[1])
        user_generations[user_id] = user_generations.get(user_id, FREE_GENERATIONS) + amount
        user_purchases[user_id] = user_purchases.get(user_id, 0) + amount
        daily_stats["purchases"] += 1

        await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! –¢–µ–±–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")

        await notify_admin(
            context,
            f"üí∏ –ü–æ–∫—É–ø–∫–∞ —É @{username} (ID: {user_id})\n–ö—É–ø–∏–ª: {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            f"–ò—Ç–æ–≥–æ —É –Ω–µ–≥–æ: {user_generations[user_id]}",
        )

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_purchases = sum(user_purchases.values())
    total_generations = sum(user_generations.values())
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–∫—É–ø–æ–∫: {total_purchases}\n–ì–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å —É –≤—Å–µ—Ö: {total_generations}"
    )

async def send_daily_stats(context: ContextTypes.DEFAULT_TYPE):
    await notify_admin(
        context,
        f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üõí –ü–æ–∫—É–ø–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {daily_stats['purchases']}\n"
        f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_stats['generations']}",
    )
    daily_stats["purchases"] = 0
    daily_stats["generations"] = 0

# === MAIN ===
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("generate", generate))
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CallbackQueryHandler(buy_button, pattern="^buy_"))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photos))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))

    if application.job_queue:
        application.job_queue.run_daily(
            send_daily_stats, time=datetime.strptime("23:59", "%H:%M").time()
        )
    else:
        logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=f"{RENDER_URL}/{WEBHOOK_PATH}",
    )

if __name__ == "__main__":
    main()

