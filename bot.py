# bot.py ‚Äî –≤–µ—Ä—Å–∏—è 1.5 (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏: SQLite, –ª–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É, daily report)
import os
import logging
from uuid import uuid4
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import replicate

# === –î–û–ë–ê–í–õ–ï–ù–ò–Ø: –∏–º–ø–æ—Ä—Ç –¥–ª—è SQLite / async wrappers / timezone ===
import sqlite3
import asyncio
from datetime import datetime, timedelta, time, timezone
from typing import Optional, Tuple, List
# === /–î–û–ë–ê–í–õ–ï–ù–ò–Ø ===

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
RENDER_URL = os.getenv("RENDER_URL")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")

# Replicate –∫–ª–∏–µ–Ω—Ç
replicate_client = replicate.Client(api_token=REPLICATE_API_KEY)

# –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –∫–∞–∫ –±—ã–ª–æ)
user_balances = {}
FREE_GENERATIONS = 3

# -------------------------
# === –î–û–ë–ê–í–õ–ï–ù–ò–Ø: SQLite persistence ===
# -------------------------
# DB path (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ env DB_PATH)
DB_PATH = os.environ.get("DB_PATH", "bot.db")

# –°—Ç—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è ‚Äî users + generations)
_INIT_SQL = """
PRAGMA foreign_keys = ON;

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0,
    total_generations INTEGER DEFAULT 0,
    last_active TEXT
);

CREATE TABLE IF NOT EXISTS generations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    prompt TEXT,
    type TEXT,
    result_url TEXT,
    created_at TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
"""

def _init_db_sync(db_path: str = DB_PATH):
    conn = sqlite3.connect(db_path)
    try:
        conn.executescript(_INIT_SQL)
        conn.commit()
    finally:
        conn.close()

async def init_db():
    # –í—ã–∑—ã–≤–∞—Ç—å –¥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤ main)
    await asyncio.to_thread(_init_db_sync, DB_PATH)

# sync helpers
def _ensure_user_sync(user_id: int, username: Optional[str], initial_balance: int = 0):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        # insert if not exists
        cur.execute(
            "INSERT OR IGNORE INTO users (user_id, username, balance, last_active) VALUES (?, ?, ?, ?)",
            (user_id, username, initial_balance, datetime.utcnow().isoformat()),
        )
        # If record existed but balance is NULL, ensure it's 0 (defensive)
        cur.execute("UPDATE users SET last_active = ? WHERE user_id = ?", (datetime.utcnow().isoformat(), user_id))
        conn.commit()
    finally:
        conn.close()

def _adjust_balance_sync(user_id: int, delta: int) -> Optional[int]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("UPDATE users SET balance = COALESCE(balance,0) + ? WHERE user_id = ?", (delta, user_id))
        conn.commit()
        cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None
    finally:
        conn.close()

def _log_generation_sync(user_id: int, prompt: str, typ: str, result_url: str):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO generations (user_id, prompt, type, result_url, created_at) VALUES (?, ?, ?, ?, ?)",
            (user_id, prompt, typ, result_url, datetime.utcnow().isoformat()),
        )
        cur.execute(
            "UPDATE users SET total_generations = COALESCE(total_generations,0) + 1, last_active = ? WHERE user_id = ?",
            (datetime.utcnow().isoformat(), user_id),
        )
        conn.commit()
    finally:
        conn.close()

def _daily_stats_between_sync(start_iso: str, end_iso: str) -> Tuple[int, int, List[Tuple[int,int]]]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM generations WHERE created_at >= ? AND created_at < ?", (start_iso, end_iso))
        total = cur.fetchone()[0]
        cur.execute("SELECT COUNT(DISTINCT user_id) FROM generations WHERE created_at >= ? AND created_at < ?", (start_iso, end_iso))
        unique = cur.fetchone()[0]
        cur.execute("SELECT user_id, COUNT(*) as c FROM generations WHERE created_at >= ? AND created_at < ? GROUP BY user_id ORDER BY c DESC LIMIT 5", (start_iso, end_iso))
        top = cur.fetchall()
        return total, unique, top
    finally:
        conn.close()

# async wrappers
async def ensure_user(user_id: int, username: Optional[str], initial_balance: int = 0):
    await asyncio.to_thread(_ensure_user_sync, user_id, username, initial_balance)

async def adjust_balance(user_id: int, delta: int) -> Optional[int]:
    return await asyncio.to_thread(_adjust_balance_sync, user_id, delta)

async def log_generation(user_id: int, prompt: str, typ: str, result_url: str):
    await asyncio.to_thread(_log_generation_sync, user_id, prompt, typ, result_url)

async def daily_stats_between(start_iso: str, end_iso: str):
    return await asyncio.to_thread(_daily_stats_between_sync, start_iso, end_iso)

# admin notify helper
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, user_id: int, username: Optional[str], prompt: str, result: str, typ: str):
    if not ADMIN_ID:
        return
    header = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or 'none'} (id:{user_id})\n‚è± {datetime.utcnow().isoformat()} UTC\n–¢–∏–ø: {typ}\n\n–ü—Ä–æ–º—Ç:\n{prompt}\n\n"
    try:
        lower = (result or "").lower()
        if lower.startswith("http") and any(ext in lower for ext in [".png", ".jpg", ".jpeg", ".webp", ".gif"]):
            await context.bot.send_message(chat_id=ADMIN_ID, text=header + "–†–µ–∑—É–ª—å—Ç–∞—Ç: (—Å–º. —Ñ–æ—Ç–æ –Ω–∏–∂–µ)")
            await context.bot.send_photo(chat_id=ADMIN_ID, photo=result)
        else:
            preview = result if len(result) < 1400 else result[:1400] + "..."
            await context.bot.send_message(chat_id=ADMIN_ID, text=header + f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{preview}")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
# -------------------------
# === /–î–û–ë–ê–í–õ–ï–ù–ò–Ø: SQLite persistence ===
# -------------------------

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="buy")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Replicate
async def generate_image(prompt: str, images: list[str] = None):
    try:
        input_data = {"prompt": prompt}
        if images:
            input_data["image"] = images
        output = replicate_client.run(
            "google/nano-banana:9f3b10f33c31d7b8f1dc6f93aef7da71bdf2c1c6d53e11b6c0e4eafd7d7b0b3e",
            input=input_data,
        )
        if isinstance(output, list) and len(output) > 0:
            return output[0]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return None

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_balances:
        user_balances[user_id] = FREE_GENERATIONS

    # === –î–û–ë–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–±–µ–∑ —Å–º–µ–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è) ===
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ DB, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –±–∞–ª–∞–Ω—Å–æ–º –∏–∑ user_balances (—á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç—ã/–ª–æ–≥–∏–∫—É)
    try:
        await ensure_user(user_id, update.effective_user.username or "", user_balances.get(user_id, FREE_GENERATIONS))
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SQLite (—ç—Ç–æ –Ω–µ –ª–æ–º–∞–µ—Ç —Ä–∞–±–æ—Ç—É)")
    # === /–î–û–ë–ê–í–õ–ï–ù–ò–ï ===

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é "
        "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Nano Banana (Google Gemini 2.5 Flash ‚ö°) ‚Äî –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\n"
        f"‚ú® –£ —Ç–µ–±—è {FREE_GENERATIONS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é, "
        "—á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )

    await update.message.reply_text(text, reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "generate":
        await query.message.reply_text(
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ.\n\n"
            "–î–ª—è –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç Google Gemini 2.5 Flash ‚Äî –æ–Ω–∞ –∂–µ Nano Banana üçå\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"
        )
        await query.message.delete()

    elif query.data == "balance":
        balance = user_balances.get(query.from_user.id, FREE_GENERATIONS)
        await query.message.reply_text(f"üí∞ –£ –≤–∞—Å {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.", reply_markup=main_menu())

    elif query.data == "buy":
        keyboard = [
            [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10")],
            [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50")],
            [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100")],
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "help":
        help_text = (
            "‚ÑπÔ∏è –ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, "
            "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n\n"
            "üí∞ –î–ª—è –ø–æ–∫—É–ø–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram Stars. "
            "–ï—Å–ª–∏ —É –≤–∞—Å –∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram ‚Üí –ö–æ—à–µ–ª–µ–∫ ‚Üí –ü–æ–ø–æ–ª–Ω–∏—Ç—å."
        )
        await query.message.reply_text(help_text, reply_markup=main_menu())

# –ü–æ–∫—É–ø–∫–∏
async def buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    package_map = {
        "buy_10": (10, 40),
        "buy_50": (50, 200),
        "buy_100": (100, 400),
    }

    if query.data in package_map:
        gens, stars = package_map[query.data]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç —á–µ—Ä–µ–∑ Telegram Stars
        await query.message.reply_invoice(
            title="–ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
            description=f"{gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
            payload=f"buy_{gens}",
            provider_token="",  # ‚ùó –î–ª—è Stars –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
            currency="XTR",
            prices=[LabeledPrice(label=f"{gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", amount=stars)],
            start_parameter="stars-payment",
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    user_id = update.effective_user.id

    gens_map = {
        "buy_10": 10,
        "buy_50": 50,
        "buy_100": 100,
    }

    gens = gens_map.get(payment.invoice_payload, 0)
    if gens > 0:
        user_balances[user_id] = user_balances.get(user_id, 0) + gens

        # === –î–û–ë–ê–í–õ–ï–ù–ò–ï: –æ—Ç—Ä–∞–∑–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ SQLite ===
        try:
            await adjust_balance(user_id, gens)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ SQLite (–Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)")
        # === /–î–û–ë–ê–í–õ–ï–ù–ò–ï ===

        await update.message.reply_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.",
            reply_markup=main_menu()
        )

# –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º / —Ñ–æ—Ç–æ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = user_balances.get(user_id, FREE_GENERATIONS)

    if balance <= 0:
        await update.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=main_menu()
        )
        return

    prompt = update.message.caption or update.message.text
    if not prompt:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    images = []
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        images.append(file.file_path)

    result = await generate_image(prompt, images if images else None)

    if result:
        await update.message.reply_photo(result)

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–∫–∞–∫ –±—ã–ª–æ)
        user_balances[user_id] -= 1

        # === –î–û–ë–ê–í–õ–ï–ù–ò–Ø: –∑–∞–ø–∏—Å–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ª–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ SQLite, —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ ===
        try:
            # reflect deduction in DB
            await adjust_balance(user_id, -1)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –≤ SQLite (–Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)")

        try:
            # log generation
            await log_generation(user_id, prompt, "image", result)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ SQLite")

        # notify admin with prompt + result (image or text)
        try:
            await notify_admin(context, user_id, update.effective_user.username or "", prompt, result, "image")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω—É –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        # === /–î–û–ë–ê–í–õ–ï–ù–ò–Ø ===

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="generate"),
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end"),
            ]
        ]
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë.",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
async def end_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # === –î–û–ë–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite (–Ω–µ –º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ) ===
    # –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ SQL –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.run(_init_db_sync(DB_PATH))
    except Exception:
        # –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio.run –ø–ª–æ—Ö–æ–π –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å sync
        try:
            _init_db_sync(DB_PATH)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQLite (–Ω–µ –ª–æ–º–∞–µ–º –∑–∞–ø—É—Å–∫)")
    # === /–î–û–ë–ê–í–õ–ï–ù–ò–ï ===

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_handler, pattern="^(generate|balance|buy|help)$"))
    app.add_handler(CallbackQueryHandler(buy_handler, pattern="^(buy_10|buy_50|buy_100)$"))
    app.add_handler(CallbackQueryHandler(end_handler, pattern="^end$"))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))

    # === –î–û–ë–ê–í–õ–ï–ù–ò–ï: daily report job –≤ 09:00 UTC (==12:00 –ú–°–ö) ===
    try:
        # job_queue –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è app
        def _schedule_report():
            # run_daily expects time with tzinfo=UTC; create it
            daily_time_utc = time(hour=9, minute=0, tzinfo=timezone.utc)
            app.job_queue.run_daily(_daily_report_job_wrapper, time=daily_time_utc)
        # we add job using app.job_queue directly
        # define wrapper so it has correct signature when called by JobQueue
        async def _daily_report_job_wrapper(context: ContextTypes.DEFAULT_TYPE):
            # compute Moscow day range in UTC and call daily_stats_between + send to admin
            # This uses the same logic as other helpers
            now_utc = datetime.now(timezone.utc)
            moscow_now = now_utc.astimezone(timezone(timedelta(hours=3)))
            moscow_date = moscow_now.date()
            moscow_start = datetime(moscow_date.year, moscow_date.month, moscow_date.day, 0, 0, 0, tzinfo=timezone(timedelta(hours=3)))
            moscow_end = moscow_start + timedelta(days=1)
            utc_start = (moscow_start.astimezone(timezone.utc)).replace(tzinfo=None)
            utc_end = (moscow_end.astimezone(timezone.utc)).replace(tzinfo=None)
            start_iso = utc_start.isoformat()
            end_iso = utc_end.isoformat()

            try:
                total, unique, top = await daily_stats_between(start_iso, end_iso)
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞")
                total, unique, top = 0, 0, []

            lines = [
                f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {moscow_date.isoformat()} (–ú–æ—Å–∫–≤–∞, UTC+3):",
                f"–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total}",
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique}",
            ]
            if top:
                lines.append("–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):")
                for uid, cnt in top:
                    lines.append(f"{uid}: {cnt}")
            text = "\n".join(lines)
            try:
                if ADMIN_ID:
                    await context.bot.send_message(chat_id=ADMIN_ID, text=text)
                logger.info("Daily report sent for %s", moscow_date.isoformat())
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É")

        # schedule job
        daily_time_utc = time(hour=9, minute=0, tzinfo=timezone.utc)
        app.job_queue.run_daily(_daily_report_job_wrapper, time=daily_time_utc)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å daily report (–Ω–µ –ª–æ–º–∞–µ–º –∑–∞–ø—É—Å–∫)")

    # Webhook –¥–ª—è Render
    port = int(os.environ.get("PORT", 5000))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"{RENDER_URL}/{TOKEN}"
    )

if __name__ == "__main__":
    main()


