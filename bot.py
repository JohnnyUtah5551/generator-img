import logging
import os
import replicate
import requests
from deep_translator import GoogleTranslator
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    PreCheckoutQueryHandler,
)

# === –õ–û–ì–ò ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
RENDER_URL = os.getenv("RENDER_URL", "https://generator-img-1.onrender.com")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook")

# === –ü–ê–ú–Ø–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
user_data = {}

# === –¶–ï–ù–´ (–≤ –∑–≤—ë–∑–¥–∞—Ö) ===
PRICES = {
    "10": 40,   # 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê
    "50": 200,  # 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê
    "100": 400, # 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê
}

# === –ö–û–ú–ê–ù–î–ê /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = {"free": 3, "paid": 0}
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Nano Banana üçå**.\n\n"
        "‚ú® –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
        "üí´ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ? –ö—É–ø–∏ –ø–∞–∫–µ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Telegram Stars!\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/balance ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/generate ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "/buy ‚Äî –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    )

# === –ö–û–ú–ê–ù–î–ê /balance ===
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data.get(user_id, {"free": 0, "paid": 0})
    await update.message.reply_text(
        f"üìä –ë–∞–ª–∞–Ω—Å:\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {data['free']}\n"
        f"–ü–ª–∞—Ç–Ω—ã–µ: {data['paid']}"
    )

# === –ö–û–ú–ê–ù–î–ê /buy ===
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10")],
        [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50")],
        [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üí´ –í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=reply_markup)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ü–û–ö–£–ü–ö–ò ===
async def buy_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    package = query.data.split("_")[1]
    price = PRICES.get(package)
    if not price:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    prices = [LabeledPrice(label=f"{package} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", amount=price * 100)]  # Stars ‚Üí –∫–æ–ø–µ–π–∫–∏
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=f"{package} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        description=f"–ü–æ–∫—É–ø–∫–∞ {package} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è Nano Banana üçå",
        payload=f"buy_{package}",
        provider_token="",
        currency="XTR",  # Telegram Stars
        prices=prices,
        start_parameter="test-payment",
    )

# === CALLBACK –ü–û–ö–£–ü–ö–ò ===
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

# === –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê ===
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    payload = update.message.successful_payment.invoice_payload
    package = payload.split("_")[1]

    if user_id not in user_data:
        user_data[user_id] = {"free": 0, "paid": 0}

    user_data[user_id]["paid"] += int(package)
    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—Ö! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {package} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")

# === –ö–û–ú–ê–ù–î–ê /generate ===
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data.get(user_id, {"free": 0, "paid": 0})

    if data["free"] <= 0 and data["paid"] <= 0:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ö—É–ø–∏ –µ—â—ë —Å –ø–æ–º–æ—â—å—é /buy")
        return

    if not context.args:
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä:\n/generate –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ")
        return

    prompt = " ".join(context.args)

    try:
        translated_prompt = GoogleTranslator(source="auto", target="en").translate(prompt)
    except Exception:
        translated_prompt = prompt

    try:
        client = replicate.Client(api_token=REPLICATE_API_KEY)
        output = client.run(
            "google/nano-banana",
            input={"prompt": translated_prompt}
        )

        if not output:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")

        image_url = output[0]
        await update.message.reply_photo(photo=image_url, caption="‚ú® –ì–æ—Ç–æ–≤–æ!")

        if data["free"] > 0:
            data["free"] -= 1
        else:
            data["paid"] -= 1

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# === MAIN ===
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("generate", generate))
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(CallbackQueryHandler(buy_button, pattern="^buy_"))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 5000)),
        url_path=WEBHOOK_PATH,
        webhook_url=f"{RENDER_URL}/{WEBHOOK_PATH}",
    )

if __name__ == "__main__":
    main()
