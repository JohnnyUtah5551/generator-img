import os
import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import replicate

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
RENDER_URL = os.getenv("RENDER_URL")

# –†–µ–ø–ª–∏–∫–µ–π—Ç –∫–ª–∏–µ–Ω—Ç
os.environ["REPLICATE_API_TOKEN"] = REPLICATE_API_TOKEN

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}
FREE_GENERATIONS = 3

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="buy")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = {"generations": FREE_GENERATIONS, "photos": [], "prompt": None}
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π "
        "—Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Nano Banana (Google Gemini 2.5 Flash) ‚Äî –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "‚ú® –£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, "
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )
    await update.message.reply_text(text, reply_markup=get_main_menu())

# –ë–∞–ª–∞–Ω—Å
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    gens = user_sessions.get(user_id, {}).get("generations", 0)
    await query.message.reply_text(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")

# –ü–æ–º–æ—â—å
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚ÑπÔ∏è –Ø –º–æ–≥—É:\n"
        "- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É.\n"
        "- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ 4-—Ö —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n"
        "- –£ —Ç–µ–±—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ ‚≠ê."
    )
    await query.message.reply_text(text)

# –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10")],
        [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50")],
        [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100")],
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "balance":
        await balance(update, context)
    elif query.data == "help":
        await help_cmd(update, context)
    elif query.data == "buy":
        await buy(update, context)
    elif query.data == "generate":
        await query.answer()
        await query.message.reply_text(
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ.\n\n"
            "–î–ª—è –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç Google Gemini 2.5 Flash ‚Äî –æ–Ω–∞ –∂–µ Nano Banana üçå\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"
        )
        await query.message.delete()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
async def handle_text_or_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.setdefault(user_id, {"generations": FREE_GENERATIONS, "photos": [], "prompt": None})

    # –¢–µ–∫—Å—Ç
    if update.message.text:
        session["prompt"] = update.message.text
    # –§–æ—Ç–æ
    elif update.message.photo:
        photos = update.message.photo
        file_id = photos[-1].file_id
        session["photos"].append(file_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
    if not session["prompt"] and not session["photos"]:
        return

    if session["photos"] and not session["prompt"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º.")
        return

    if session["generations"] <= 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ö—É–ø–∏ –Ω–æ–≤—ã–µ –∑–∞ ‚≠ê!")
        return

    session["generations"] -= 1
    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate Nano Banana
        output_url = "https://placehold.co/600x400?text=Nano+Banana+Result"

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat"),
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")
            ]
        ]
        await update.message.reply_photo(photo=output_url, reply_markup=InlineKeyboardMarkup(keyboard))
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –ü–æ–≤—Ç–æ—Ä–∏—Ç—å / –ó–∞–≤–µ—Ä—à–∏—Ç—å
async def repeat_or_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    session = user_sessions.get(user_id, {})

    if query.data == "repeat":
        if session.get("prompt") or session.get("photos"):
            await query.answer("–ü–æ–≤—Ç–æ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
            await handle_text_or_photo(query, context)
    elif query.data == "finish":
        await query.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        user_sessions[user_id] = {"generations": session.get("generations", 0), "photos": [], "prompt": None}
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –í–µ–±—Ö—É–∫
async def webhook(request):
    from aiohttp import web
    data = await request.json()
    update = Update.de_json(data, context.bot)
    await context.application.process_update(update)
    return web.Response()

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_handler, pattern="^(balance|help|buy|generate)$"))
    app.add_handler(CallbackQueryHandler(repeat_or_finish, pattern="^(repeat|finish)$"))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_text_or_photo))

    port = int(os.environ.get("PORT", "5000"))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"{RENDER_URL}/{TOKEN}"
    )

if __name__ == "__main__":
    main()
