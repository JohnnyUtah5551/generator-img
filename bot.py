import os
import logging
import requests
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)
import replicate

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
PORT = int(os.environ.get("PORT", 5000))
RENDER_URL = os.getenv("RENDER_URL")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—à https://... onrender.com
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook")
ADMIN_ID = int(os.getenv("ADMIN_ID")) if os.getenv("ADMIN_ID") else None

FREE_GENERATIONS = 3

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
if not REPLICATE_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω REPLICATE_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
if not RENDER_URL:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω RENDER_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL (https://...)")

if ADMIN_ID is None:
    logger.warning("ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç.")

# –ö–ª–∏–µ–Ω—Ç Replicate (Nano Banana —á–µ—Ä–µ–∑ replicate)
client = replicate.Client(api_token=REPLICATE_API_KEY)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ sqlite –ø–æ–∑–∂–µ)
user_generations = {}   # user_id -> remaining generations
user_purchases = {}     # user_id -> total purchased
daily_stats = {"purchases": 0, "generations": 0}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ===
def get_replicate_balance():
    try:
        url = "https://api.replicate.com/v1/account"
        headers = {"Authorization": f"Token {REPLICATE_API_KEY}"}
        r = requests.get(url, headers=headers, timeout=10)
        if r.status_code == 200:
            data = r.json()
            return data.get("credits", {}).get("usd_cents", 0) / 100
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Replicate: {e}")
        return None

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str):
    if ADMIN_ID:
        balance = get_replicate_balance()
        balance_text = f"\nüí∞ –ë–∞–ª–∞–Ω—Å Replicate: {balance:.2f}$" if balance is not None else ""
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=message + balance_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

# === –ö–æ–º–∞–Ω–¥—ã –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞
    if user_id not in user_generations:
        user_generations[user_id] = FREE_GENERATIONS

    kb = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="menu_generate")],
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data="menu_balance"),
         InlineKeyboardButton("–ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="menu_buy")],
    ]
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ "
        "**Nano Banana (Google Gemini 2.5 Flash)** ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        f"‚ú® –£ —Ç–µ–±—è –µ—Å—Ç—å {user_generations.get(user_id, 0)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="Markdown")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = user_generations.get(user_id, FREE_GENERATIONS)
    await update.message.reply_text(f"üìä –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu_generate":
        kb = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="generate_text")],
              [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ (–¥–æ 4)", callback_data="generate_photos")]]
        await query.message.reply_text("–ö–∞–∫ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é?", reply_markup=InlineKeyboardMarkup(kb))
        return
    if data == "menu_balance":
        await balance(update, context)
        return
    if data == "menu_buy":
        await buy(update, context)
        return

    # –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ (callback buy_...)
    if data.startswith("buy_"):
        await buy_button(update, context)
        return

async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # /generate <prompt>
    user_id = update.effective_user.id
    if user_id not in user_generations:
        user_generations[user_id] = FREE_GENERATIONS
    if user_generations[user_id] <= 0:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ /buy –∏–ª–∏ –∫–Ω–æ–ø–∫—É.")
        return

    prompt = " ".join(context.args) if context.args else None
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /generate <—Ç–µ–∫—Å—Ç_–æ–ø–∏—Å–∞–Ω–∏—è>")
        return

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    try:
        output = client.run(
            "google/nano-banana:latest",  # –º–æ–¥–µ–ª—å Nano Banana –Ω–∞ Replicate ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–≥, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π version id
            input={"prompt": prompt},
        )
        if isinstance(output, list):
            for url in output:
                await update.message.reply_photo(photo=url)
        elif isinstance(output, str):
            await update.message.reply_photo(photo=output)
        else:
            await update.message.reply_text(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {output}")

        # —É–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
        user_generations[user_id] = max(0, user_generations.get(user_id, FREE_GENERATIONS) - 1)
        daily_stats["generations"] += 1

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        username = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
        await notify_admin(
            context,
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id})\nüìù –ü—Ä–æ–º–ø—Ç: {prompt}\nüéØ –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_generations[user_id]}",
        )

        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç):")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        username = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
        await notify_admin(context, f"‚ùå –û—à–∏–±–∫–∞ —É @{username} (ID: {user_id}): {e}")

# === –ü–æ–∫—É–ø–∫–∏ ===
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 20‚≠ê", callback_data="buy_10")],
        [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 100‚≠ê", callback_data="buy_50")],
        [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_100")],
    ]
    if update.callback_query:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:", reply_markup=InlineKeyboardMarkup(kb))
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç:", reply_markup=InlineKeyboardMarkup(kb))

async def buy_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        choice = query.data
    else:
        choice = context.args[0] if context.args else None

    if choice == "buy_10":
        amount = 10
        price_stars = 20
    elif choice == "buy_50":
        amount = 50
        price_stars = 100
    else:
        amount = 100
        price_stars = 200

    # –ó–¥–µ—Å—å –º—ã –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É ‚Äî —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram Stars —Ç—Ä–µ–±—É–µ—Ç provider_token –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram Invoices –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å provider_token –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    provider_token = os.getenv("PROVIDER_TOKEN", "")
    if not provider_token:
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        if query:
            await query.message.reply_text("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return

    prices = [LabeledPrice(f"{amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", int(price_stars))]  # –ø—Ä–∏–º–µ—Ä ‚Äî –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    await context.bot.send_invoice(
        chat_id=query.message.chat_id if query else update.effective_chat.id,
        title=f"–ü–æ–∫—É–ø–∫–∞ {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        description=f"–ü–∞–∫–µ—Ç {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ {price_stars}‚≠ê",
        payload=f"buy_{amount}",
        provider_token=provider_token,
        currency="XTR",
        prices=prices,
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    payload = update.message.successful_payment.invoice_payload
    if "buy_" in payload:
        amount = int(payload.split("_")[1])
        user_generations[user_id] = user_generations.get(user_id, FREE_GENERATIONS) + amount
        user_purchases[user_id] = user_purchases.get(user_id, 0) + amount
        daily_stats["purchases"] += 1

        await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")
        await notify_admin(
            context,
            f"üí∏ –ü–æ–∫—É–ø–∫–∞ —É @{username} (ID: {user_id}): +{amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ: {user_generations[user_id]}",
        )

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω) ===
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    total_purchases = sum(user_purchases.values())
    total_generations = sum(user_generations.values())
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–∫—É–ø–æ–∫ (–≤—Å–µ–≥–æ): {total_purchases}\n–ì–µ–Ω–µ—Ä–∞—Ü–∏–π (–≤—Å–µ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫): {total_generations}"
    )

# === MAIN ===
def main():
    # –°–æ–±–∏—Ä–∞–µ–º webhook URL
    webhook_url = f"{RENDER_URL.rstrip('/')}/{WEBHOOK_PATH.lstrip('/')}"

    # –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å webhook –≤ Telegram. –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É.
    try:
        r = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
            json={"url": webhook_url},
            timeout=15,
        )
        logger.info("–û—Ç–≤–µ—Ç setWebhook: %s %s", r.status_code, r.text)
        if r.status_code != 200 or not r.json().get("ok"):
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RENDER_URL/WEBHOOK_PATH.")
            raise SystemExit("setWebhook failed: " + r.text)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å webhook:")
        raise SystemExit(f"–ù–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å webhook: {e}")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PTB –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("generate", generate_command))
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CallbackQueryHandler(menu_callback))
    application.add_handler(CallbackQueryHandler(buy_button, pattern="^buy_"))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))

    logger.info("–ó–∞–ø—É—Å–∫–∞—é webhook-—Å–µ—Ä–≤–µ—Ä –Ω–∞ %s:%s, url_path=%s", "0.0.0.0", PORT, WEBHOOK_PATH)
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=webhook_url,
    )

if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    main()

if __name__ == "__main__":
    main()


