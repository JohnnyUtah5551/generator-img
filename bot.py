import logging
import os
import sqlite3
import replicate

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    filters,
)

# -----------------------------
# –õ–û–ì–ò
# -----------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# -----------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# -----------------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")
RENDER_URL = os.getenv("RENDER_URL")

replicate.Client(api_token=REPLICATE_API_KEY)

DB_PATH = "bot.db"

# -----------------------------
# –ë–î
# -----------------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        """CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 3,
                last_image_url TEXT
            )"""
    )
    conn.commit()
    conn.close()


def get_balance(user_id: int) -> int:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    if not row:
        c.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 3))
        conn.commit()
        balance = 3
    else:
        balance = row[0]
    conn.close()
    return balance


def update_balance(user_id: int, delta: int):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (delta, user_id))
    conn.commit()
    conn.close()


def save_last_image(user_id: int, url: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET last_image_url=? WHERE user_id=?", (url, user_id))
    conn.commit()
    conn.close()


def get_last_image(user_id: int) -> str | None:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT last_image_url FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row and row[0] else None


# -----------------------------
# –ú–ï–ù–Æ
# -----------------------------
def main_menu():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
            [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="buy")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        ]
    )


# -----------------------------
# –•–≠–ù–î–õ–ï–†–´
# -----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ "
        "Nano Banana (Google Gemini 2.5 Flash) ‚Äî –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?\n"
        f"‚ú® –£ —Ç–µ–±—è {balance} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, "
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )

    await update.message.reply_text(
        text,
        parse_mode="Markdown",
        reply_markup=main_menu(),
    )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "balance":
        balance = get_balance(user_id)
        await query.message.reply_text(f"üìä –£ –≤–∞—Å {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.", reply_markup=main_menu())

    elif query.data == "help":
        await query.message.reply_text(
            "‚ÑπÔ∏è –Ø –ø–æ–º–æ–≥—É —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–æ—Ç–æ (–¥–æ 4 —à—Ç—É–∫ —Å –ø–æ–¥–ø–∏—Å—å—é).\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=main_menu(),
        )

    elif query.data == "generate":
        await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.", reply_markup=main_menu())

    elif query.data == "buy":
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10")],
                [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50")],
                [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100")],
            ]
        )
        await query.message.reply_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=keyboard)

    elif query.data.startswith("buy_"):
        packages = {"buy_10": (10, 40), "buy_50": (50, 200), "buy_100": (100, 400)}
        count, price = packages[query.data]
        title = f"{count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
        description = f"–ü–∞–∫–µ—Ç –∏–∑ {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –±–æ—Ç–∞."
        payload = f"purchase_{count}"
        currency = "XTR"
        prices = [LabeledPrice(label=title, amount=price)]
        await context.bot.sendInvoice(
            chat_id=user_id,
            title=title,
            description=description,
            payload=payload,
            provider_token="",  # –ø—É—Å—Ç–æ –¥–ª—è Telegram Stars
            currency=currency,
            prices=prices,
        )


# -----------------------------
# –û–ü–õ–ê–¢–ê
# -----------------------------
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)


async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payload = update.message.successful_payment.invoice_payload
    if payload == "purchase_10":
        update_balance(user_id, 10)
    elif payload == "purchase_50":
        update_balance(user_id, 50)
    elif payload == "purchase_100":
        update_balance(user_id, 100)

    await update.message.reply_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.", reply_markup=main_menu())


# -----------------------------
# –ì–ï–ù–ï–†–ê–¶–ò–Ø
# -----------------------------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)

    if balance <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    prompt = update.message.text
    wait_msg = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")

    try:
        output = replicate.run(
            "google/nano-banana",
            input={"prompt": prompt},
        )
        image_url = output[0]
        save_last_image(user_id, image_url)
        update_balance(user_id, -1)

        await update.message.reply_photo(
            image_url,
            caption="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            reply_markup=main_menu(),
        )
    finally:
        await wait_msg.delete()


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)
    if balance <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    photos = update.message.photo
    if not photos:
        return

    caption = update.message.caption or "–ò–∑–º–µ–Ω–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    wait_msg = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")

    try:
        output = replicate.run(
            "google/nano-banana",
            input={"prompt": caption, "image": photos[-1].get_file().file_path},
        )
        image_url = output[0]
        save_last_image(user_id, image_url)
        update_balance(user_id, -1)

        await update.message.reply_photo(
            image_url,
            caption="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            reply_markup=main_menu(),
        )
    finally:
        await wait_msg.delete()


# -----------------------------
# MAIN
# -----------------------------
def main():
    init_db()
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        url_path=TELEGRAM_BOT_TOKEN,
        webhook_url=f"{RENDER_URL}/{TELEGRAM_BOT_TOKEN}",
    )


if __name__ == "__main__":
    main()
