import logging
import sqlite3
import json
import os
import replicate
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –†–µ–ø–ª–∏–∫–µ–π—Ç —Ç–æ–∫–µ–Ω
os.environ["REPLICATE_API_TOKEN"] = "YOUR_REPLICATE_API_TOKEN"
MODEL = "google/nano-banana"
VERSION = "latest"

# SQLite
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    stars INTEGER DEFAULT 0
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS sessions (
    user_id INTEGER PRIMARY KEY,
    prompt TEXT,
    initial_images TEXT,
    last_image TEXT,
    active INTEGER DEFAULT 0
)
""")
conn.commit()

# --- DB helpers ---
def get_user(user_id: int):
    cursor.execute("SELECT stars FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if not row:
        cursor.execute("INSERT INTO users (user_id, stars) VALUES (?, ?)", (user_id, 3))
        conn.commit()
        return 3
    return row[0]

def update_stars(user_id: int, delta: int):
    stars = get_user(user_id)
    stars = max(0, stars + delta)
    cursor.execute("UPDATE users SET stars=? WHERE user_id=?", (stars, user_id))
    conn.commit()
    return stars

def set_session(user_id: int, prompt: str, images: list):
    cursor.execute("""
        INSERT OR REPLACE INTO sessions (user_id, prompt, initial_images, last_image, active)
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, prompt, json.dumps(images), None, 1))
    conn.commit()

def update_session_last_image(user_id: int, url: str):
    cursor.execute("UPDATE sessions SET last_image=?, active=1 WHERE user_id=?", (url, user_id))
    conn.commit()

def get_session(user_id: int):
    cursor.execute("SELECT prompt, initial_images, last_image, active FROM sessions WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if not row:
        return None
    return {
        "prompt": row[0],
        "initial_images": json.loads(row[1]) if row[1] else [],
        "last_image": row[2],
        "active": row[3],
    }

def clear_session(user_id: int):
    cursor.execute("DELETE FROM sessions WHERE user_id=?", (user_id,))
    conn.commit()

# --- UI helpers ---
def main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üõí –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")],
        ],
        resize_keyboard=True
    )

def result_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="variant"),
            InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="end"),
        ]
    ])

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    get_user(update.effective_user.id)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é "
        "**Nano Banana üçå ‚Äî —Å–∞–º–æ–π –º–æ—â–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.**\n\n"
        "‚ú® –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ\n"
        "‚Äî –£–ª—É—á—à–µ–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        "üöÄ –ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stars = get_user(update.effective_user.id)
    await update.message.reply_text(f"üí∞ –£ —Ç–µ–±—è {stars} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", reply_markup=main_menu())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å":
        await update.message.reply_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup=main_menu())
        return
    if text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
        return
    if text == "üõí –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏":
        await update.message.reply_text("üõí –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Telegram Stars —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", reply_markup=main_menu())
        return

    session = get_session(user_id)
    if session and session["active"] and session["last_image"]:
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await generate(update, context, prompt=text, input_image=session["last_image"])
    else:
        # –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
        set_session(user_id, text, [])
        await generate(update, context, prompt=text)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    image_url = file.file_path
    caption = update.message.caption

    session = get_session(user_id)

    if caption:
        # –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Üí —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        set_session(user_id, caption, [image_url])
        await generate(update, context, prompt=caption, input_images=[image_url])
    else:
        # –§–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ ‚Üí –∂–¥—ë–º –ø—Ä–æ–º—Ç
        set_session(user_id, "", [image_url])
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup=main_menu())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = get_session(user_id)

    if not session:
        await query.edit_message_caption(caption="‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup=None)
        return

    if query.data == "variant":
        await generate(query, context, prompt=session["prompt"], input_images=session["initial_images"])
    elif query.data == "end":
        clear_session(user_id)
        await query.edit_message_caption(caption="‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=None)

# --- Generation ---
async def generate(update, context, prompt: str, input_images: list = None, input_image: str = None):
    user_id = update.effective_user.id
    stars = get_user(user_id)
    if stars < 4:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.", reply_markup=main_menu())
        return

    try:
        inputs = {"prompt": prompt}
        if input_images:
            inputs["input_images"] = input_images
        if input_image:
            inputs["input_image"] = input_image

        output = replicate.run(f"{MODEL}:{VERSION}", input=inputs)
        if isinstance(output, list):
            result_url = output[0]
        else:
            result_url = output

        update_session_last_image(user_id, result_url)
        update_stars(user_id, -4)

        if isinstance(update, Update) and update.message:
            await update.message.reply_photo(
                photo=result_url,
                caption="‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë",
                reply_markup=result_keyboard()
            )
        else:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=result_url,
                caption="‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë",
                reply_markup=result_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- Main ---
def main():
    app = Application.builder().token("YOUR_TELEGRAM_BOT_TOKEN").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == "__main__":
    main()

