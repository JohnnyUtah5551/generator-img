import os
import logging
import replicate
from deep_translator import GoogleTranslator
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    PreCheckoutQueryHandler,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")
RENDER_URL = os.getenv("RENDER_URL", "https://generator-img-1.onrender.com")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
PACKAGES = {
    "10": {"stars": 40, "count": 10},
    "50": {"stars": 200, "count": 50},
    "100": {"stars": 400, "count": 100},
}


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
def translate_prompt(prompt: str) -> str:
    try:
        return GoogleTranslator(source="auto", target="en").translate(prompt)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return prompt


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = {"free": 3, "paid": 0}
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ "
        "**Google Gemini 2.5 Flash ‚Äî Nano Banana üçå**.\n\n"
        "‚ö° Nano Banana ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è "
        "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.\n\n"
        "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–¥–æ 4 –∑–∞ —Ä–∞–∑).\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/generate ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "/balance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        "/buy ‚Äî –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n"
        "–ö–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üéÅ"
    )


# –ë–∞–ª–∞–Ω—Å
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data.get(user_id, {"free": 0, "paid": 0})
    await update.message.reply_text(
        f"üí´ –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å:\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {data['free']}\n"
        f"–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {data['paid']}"
    )


# –ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10"),
        ],
        [
            InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50"),
        ],
        [
            InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100"),
        ],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def buy_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    package = query.data.split("_")[1]
    pack = PACKAGES[package]
    payload = f"buy_{package}"
    await query.message.reply_invoice(
        title=f"{package} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        description="–ü–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è Nano Banana",
        payload=payload,
        provider_token="",  # Telegram Stars –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞
        currency="XTR",
        prices=[LabeledPrice(f"{package} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", pack["stars"])],
    )


async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)


async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payload = update.message.successful_payment.invoice_payload
    package = payload.split("_")[1]
    count = PACKAGES[package]["count"]
    user_data[user_id]["paid"] += count
    await update.message.reply_text(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ (–¥–æ 4 —à—Ç—É–∫).")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = {"free": 3, "paid": 0}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if user_data[user_id]["free"] <= 0 and user_data[user_id]["paid"] <= 0:
        await update.message.reply_text(
            "üö´ –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /buy, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ."
        )
        return

    prompt = update.message.text or ""
    photos = []
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        photos.append(file.file_path)
    if update.message.document and update.message.document.mime_type.startswith("image/"):
        file = await update.message.document.get_file()
        photos.append(file.file_path)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º—Ç
    if prompt:
        prompt = translate_prompt(prompt)

    try:
        # –ó–∞–ø—Ä–æ—Å –≤ Replicate
        output = replicate.run(
            "google/nano-banana",
            input={"prompt": prompt, "image": photos if photos else None},
        )
        if isinstance(output, list):
            media = [InputMediaPhoto(url) for url in output]
            await update.message.reply_media_group(media)
        else:
            await update.message.reply_photo(output)

        # –°–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if user_data[user_id]["free"] > 0:
            user_data[user_id]["free"] -= 1
        else:
            user_data[user_id]["paid"] -= 1

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("generate", generate))

    app.add_handler(CallbackQueryHandler(buy_callback, pattern="^buy_"))
    app.add_handler(PreCheckoutQueryHandler(precheckout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.IMAGE, handle_message))

    app.run_webhook(
        listen="0.0.0.0",
        port=5000,
        url_path=TOKEN,
        webhook_url=f"{RENDER_URL}/{WEBHOOK_PATH}"
    )


if __name__ == "__main__":
    main()

