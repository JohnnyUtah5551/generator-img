# bot.py ‚Äî –≤–µ—Ä—Å–∏—è 1.5 (python-telegram-bot v20.6 + SQLite + daily reports + admin notifications)
import os
import logging
import sqlite3
import json
from datetime import datetime, timedelta, time, timezone
import asyncio
from typing import Optional, Tuple, List

import aiohttp
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# --------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—á–µ—Ä–µ–∑ env)
# --------------------------
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.environ.get("REPLICATE_API_KEY")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
RENDER_URL = os.environ.get("RENDER_URL")

DB_PATH = "bot.db"

# –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞: 12:00 –ú–æ—Å–∫–≤–∞ (UTC+3) -> —ç—Ç–æ 09:00 UTC (Moscow is fixed +3)
DAILY_REPORT_UTC_TIME = time(hour=9, minute=0, second=0, tzinfo=timezone.utc)

# —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∑–≤—ë–∑–¥—ã). –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
COST_PER_IMAGE = 1
COST_PER_TEXT = 0

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# --------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
# --------------------------
INIT_SQL = """
PRAGMA foreign_keys = ON;

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0,
    total_generations INTEGER DEFAULT 0,
    last_active TEXT
);

CREATE TABLE IF NOT EXISTS generations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    prompt TEXT,
    type TEXT, -- 'image' –∏–ª–∏ 'text'
    result_url TEXT,
    created_at TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
"""

def init_db():
    conn = sqlite3.connect(DB_PATH)
    try:
        conn.executescript(INIT_SQL)
        conn.commit()
    finally:
        conn.close()
    logger.info("DB initialized at %s", DB_PATH)

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö DB-–æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ñ–æ–Ω–µ
async def db_run(func, *args, **kwargs):
    return await asyncio.to_thread(func, *args, **kwargs)

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –¥–±-—Ñ—É–Ω–∫—Ü–∏–∏ (–±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã —á–µ—Ä–µ–∑ db_run)
def _get_user_sync(user_id: int) -> Optional[Tuple]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("SELECT user_id, username, balance, total_generations, last_active FROM users WHERE user_id = ?", (user_id,))
        return cur.fetchone()
    finally:
        conn.close()

def _create_user_sync(user_id: int, username: Optional[str]):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute(
            "INSERT OR IGNORE INTO users (user_id, username, last_active) VALUES (?, ?, ?)",
            (user_id, username, datetime.utcnow().isoformat())
        )
        conn.commit()
    finally:
        conn.close()

def _update_last_active_sync(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("UPDATE users SET last_active = ? WHERE user_id = ?", (datetime.utcnow().isoformat(), user_id))
        conn.commit()
    finally:
        conn.close()

def _adjust_balance_sync(user_id: int, delta: int) -> Optional[int]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (delta, user_id))
        conn.commit()
        cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None
    finally:
        conn.close()

def _log_generation_sync(user_id: int, prompt: str, typ: str, result_url: str):
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO generations (user_id, prompt, type, result_url, created_at) VALUES (?, ?, ?, ?, ?)",
            (user_id, prompt, typ, result_url, datetime.utcnow().isoformat())
        )
        cur.execute("UPDATE users SET total_generations = total_generations + 1, last_active = ? WHERE user_id = ?",
                    (datetime.utcnow().isoformat(), user_id))
        conn.commit()
    finally:
        conn.close()

def _daily_stats_sync(date_iso: str) -> Tuple[int, int, List[Tuple[int,int]]]:
    """
    date_iso: 'YYYY-MM-DD' (Moscow local date or UTC date formatted appropriately).
    Returns: total_generations, unique_users, top_users_list [(user_id, count), ...]
    """
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        like = f"{date_iso}%"
        cur.execute("SELECT COUNT(*) FROM generations WHERE created_at LIKE ?", (like,))
        total = cur.fetchone()[0]
        cur.execute("SELECT COUNT(DISTINCT user_id) FROM generations WHERE created_at LIKE ?", (like,))
        unique = cur.fetchone()[0]
        cur.execute("SELECT user_id, COUNT(*) as c FROM generations WHERE created_at LIKE ? GROUP BY user_id ORDER BY c DESC LIMIT 5", (like,))
        top = cur.fetchall()
        return total, unique, top
    finally:
        conn.close()

def _get_top_users_sync(limit: int = 10) -> List[Tuple[int,int]]:
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        cur.execute("SELECT user_id, total_generations FROM users ORDER BY total_generations DESC LIMIT ?", (limit,))
        return cur.fetchall()
    finally:
        conn.close()

# --------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ RENDER_URL / REPLICATE_API_KEY)
# --------------------------
# –ü–æ–¥–≥–æ–Ω—è–π payload/–ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥ API, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å.
async def generate_image(prompt: str) -> Tuple[bool, str]:
    if not RENDER_URL or not REPLICATE_API_KEY:
        return False, "RENDER_URL –∏–ª–∏ REPLICATE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    headers = {
        "Authorization": f"Token {REPLICATE_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }
    payload = {"prompt": prompt}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(RENDER_URL, json=payload, headers=headers, timeout=60) as resp:
                text = await resp.text()
                if resp.status != 200:
                    logger.error("Render returned %s: %s", resp.status, text)
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
                    return False, f"Render error {resp.status}"
                data = await resp.json()
                # –ü–∞—Ä—Å–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ —Å URL
                for k in ("url", "result_url", "image_url", "output", "outputs"):
                    if k in data:
                        val = data[k]
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        if isinstance(val, list) and val:
                            # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º url
                            if isinstance(val[0], dict):
                                for key in ("url", "image_url", "result_url"):
                                    if key in val[0]:
                                        return True, val[0][key]
                            # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                            if isinstance(val[0], str):
                                return True, val[0]
                        else:
                            if isinstance(val, str):
                                return True, val
                            if isinstance(val, dict):
                                for key in ("url", "image_url", "result_url"):
                                    if key in val:
                                        return True, val[key]
                # fallback: —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ
                return False, json.dumps(data)[:1500]
    except asyncio.TimeoutError:
        return False, "Timeout –ø—Ä–∏ –≤—ã–∑–æ–≤–µ RENDER_URL"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ generate_image")
        return False, str(e)

# --------------------------
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (–ø—Ä–æ–º—Ç + —Ä–µ–∑—É–ª—å—Ç–∞—Ç) ‚Äî –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
# --------------------------
async def notify_admin_about_generation(context: ContextTypes.DEFAULT_TYPE, user_id: int, username: Optional[str], prompt: str, result: str, typ: str):
    if not ADMIN_ID:
        return
    header = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or 'none'} (id:{user_id})\n‚è± {datetime.utcnow().isoformat()} UTC\n–¢–∏–ø: {typ}\n\n–ü—Ä–æ–º—Ç:\n{prompt}\n\n"
    try:
        # –ï—Å–ª–∏ result ‚Äî —ç—Ç–æ URL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        lower = (result or "").lower()
        if lower.startswith("http") and any(ext in lower for ext in [".png", ".jpg", ".jpeg", ".webp", ".gif"]):
            await context.bot.send_message(chat_id=ADMIN_ID, text=header + "–†–µ–∑—É–ª—å—Ç–∞—Ç: (—Å–º. —Ñ–æ—Ç–æ –Ω–∏–∂–µ)")
            await context.bot.send_photo(chat_id=ADMIN_ID, photo=result)
        else:
            preview = result if len(result) < 1400 else result[:1400] + "..."
            await context.bot.send_message(chat_id=ADMIN_ID, text=header + f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{preview}")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

# --------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# --------------------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await db_run(_create_user_sync, user.id, user.username)
    await db_run(_update_last_active_sync, user.id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≤–µ—Ä—Å–∏–∏ 1.5. –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

async def balance_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    row = await db_run(_get_user_sync, user.id)
    if row:
        _, username, balance, total_generations, last_active = row
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {balance}\n–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total_generations}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}")
    else:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start")

async def top_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top = await db_run(_get_top_users_sync, 10)
    if not top:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    lines = ["üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: –≥–µ–Ω–µ—Ä–∞—Ü–∏–π):"]
    for uid, cnt in top:
        lines.append(f"{uid}: {cnt}")
    await update.message.reply_text("\n".join(lines))

# --------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º—Ç–æ–≤ (–≤ 1.4 —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–∫–∏)
# --------------------------
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    user = update.effective_user
    prompt = msg.text.strip()
    if not prompt:
        await msg.reply_text("–ü—É—Å—Ç–æ–π –ø—Ä–æ–º—Ç.")
        return

    # Ensure user exists
    await db_run(_create_user_sync, user.id, user.username)
    await db_run(_update_last_active_sync, user.id)
    row = await db_run(_get_user_sync, user.id)
    if not row:
        await msg.reply_text("–û—à–∏–±–∫–∞ –ë–î.")
        return
    _, _, balance, _, _ = row

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if balance is None or balance < COST_PER_IMAGE:
        await msg.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return

    # –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å
    await db_run(_adjust_balance_sync, user.id, -COST_PER_IMAGE)
    await msg.reply_text("–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    success, result = await generate_image(prompt)
    if not success:
        # –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–≤—ë–∑–¥—ã
        await db_run(_adjust_balance_sync, user.id, COST_PER_IMAGE)
        await msg.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result}")
        return

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await db_run(_log_generation_sync, user.id, prompt, "image", result)

    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        lower = (result or "").lower()
        if lower.startswith("http") and any(ext in lower for ext in [".png", ".jpg", ".jpeg", ".webp", ".gif"]):
            await context.bot.send_photo(chat_id=user.id, photo=result, caption="–ì–æ—Ç–æ–≤–æ ‚Äî –≤–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        else:
            await msg.reply_text(f"–ì–æ—Ç–æ–≤–æ ‚Äî –≤–æ—Ç —Å—Å—ã–ª–∫–∞/—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏)
    await notify_admin_about_generation(context, user.id, user.username, prompt, result, "image")

# --------------------------
# Stars –æ–ø–ª–∞—Ç–∞ (—Ç–æ—á–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
# --------------------------
# –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥ (–ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram Stars),
# –≤—ã–∑—ã–≤–∞–π handle_successful_star_payment(user_id, amount), —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ.
async def handle_successful_star_payment(user_id: int, amount_stars: int, context: Optional[ContextTypes.DEFAULT_TYPE] = None):
    new_balance = await db_run(_adjust_balance_sync, user_id, amount_stars)
    try:
        if context:
            await context.bot.send_message(chat_id=user_id, text=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_stars}‚≠ê. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –Ω–æ –æ–±—ã—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            logger.info("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: user %s +%s (—Ç–µ–∫—É—â–∏–π %s)", user_id, amount_stars, new_balance)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏")

# --------------------------
# –ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (JobQueue)
# --------------------------
async def daily_report_job(context: ContextTypes.DEFAULT_TYPE):
    """
    Job, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (JobQueue –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ 09:00 UTC,
    —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 12:00 Moscow UTC+3).
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫—É—é –¥–∞—Ç—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—É—â–µ–º—É –º–æ–º–µ–Ω—Ç—É (UTC now)
    now_utc = datetime.now(timezone.utc)
    moscow = now_utc + timedelta(hours=3)
    date_iso = moscow.date().isoformat()  # YYYY-MM-DD (–º–æ—Å–∫–æ–≤—Å–∫–∞—è –¥–∞—Ç–∞)
    # –ü–æ—Å–∫–æ–ª—å–∫—É –≤ –ë–î created_at –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º UTC ISO timestamps, –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞—Ç–∞ UTC –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω,
    # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ—Å–∫–æ–≤—Å–∫–æ–π –¥–∞—Ç–µ. –ü—Ä–æ—â–µ: –≤—ã—á–∏—Å–ª–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –¥–Ω—è –≤ UTC –∏ –∏—Å–∫–∞—Ç—å –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É.
    # Moscow day starts at YYYY-MM-DD 00:00 MSK -> in UTC it's (MSK - 3h)
    moscow_start = datetime(moscow.year, moscow.month, moscow.day, 0, 0, 0, tzinfo=timezone(timedelta(hours=3)))
    moscow_end = moscow_start + timedelta(days=1)
    # Convert to UTC naive ISO strings (we saved created_at as UTC ISO without tzinfo)
    utc_start = (moscow_start.astimezone(timezone.utc)).replace(tzinfo=None)
    utc_end = (moscow_end.astimezone(timezone.utc)).replace(tzinfo=None)
    # We'll query created_at BETWEEN utc_start.isoformat() AND utc_end.isoformat()
    def _stats_between(start_iso: str, end_iso: str):
        conn = sqlite3.connect(DB_PATH)
        try:
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM generations WHERE created_at >= ? AND created_at < ?", (start_iso, end_iso))
            total = cur.fetchone()[0]
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM generations WHERE created_at >= ? AND created_at < ?", (start_iso, end_iso))
            unique = cur.fetchone()[0]
            cur.execute("SELECT user_id, COUNT(*) as c FROM generations WHERE created_at >= ? AND created_at < ? GROUP BY user_id ORDER BY c DESC LIMIT 5", (start_iso, end_iso))
            top = cur.fetchall()
            return total, unique, top
        finally:
            conn.close()
    start_iso = utc_start.isoformat()
    end_iso = utc_end.isoformat()
    total, unique, top = await db_run(_stats_between, start_iso, end_iso)
    lines = [
        f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {date_iso} (–ú–æ—Å–∫–≤–∞, UTC+3):",
        f"–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total}",
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique}"
    ]
    if top:
        lines.append("–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):")
        for uid, cnt in top:
            lines.append(f"{uid}: {cnt}")
    text = "\n".join(lines)
    try:
        if ADMIN_ID:
            await context.bot.send_message(chat_id=ADMIN_ID, text=text)
        logger.info("Daily report sent for %s", date_iso)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É")

# --------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("balance", balance_handler))
    app.add_handler(CommandHandler("top", top_handler))
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–∫–∞–∫ –≤ 1.4)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))

    # JobQueue: –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 09:00 UTC (—á—Ç–æ —Ä–∞–≤–Ω–æ 12:00 Moscow UTC+3)
    # run_daily –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è (datetime.time) —Å tzinfo ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º DAILY_REPORT_UTC_TIME
    # –ü–∞—Ä–∞–º–µ—Ç—Ä days=1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    app.job_queue.run_daily(daily_report_job, time=DAILY_REPORT_UTC_TIME)

    logger.info("Starting bot...")
    app.run_polling()

if __name__ == "__main__":
    main()

