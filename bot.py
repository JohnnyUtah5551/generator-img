import logging
import os
import sqlite3
import replicate

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    filters,
)

# -----------------------------
# –õ–û–ì–ò
# -----------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# -----------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# -----------------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")

DB_PATH = "bot.db"

# -----------------------------
# –ë–î
# -----------------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        """CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 3,
                last_image_url TEXT
            )"""
    )
    conn.commit()
    conn.close()


def get_balance(user_id: int) -> int:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    if not row:
        c.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 3))
        conn.commit()
        balance = 3
    else:
        balance = row[0]
    conn.close()
    return balance


def update_balance(user_id: int, delta: int):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (delta, user_id))
    conn.commit()
    conn.close()


def save_last_image(user_id: int, url: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET last_image_url=? WHERE user_id=?", (url, user_id))
    conn.commit()
    conn.close()


def get_last_image(user_id: int) -> str | None:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT last_image_url FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row and row[0] else None


# -----------------------------
# –•–≠–ù–î–õ–ï–†–´
# -----------------------------
MAIN_MENU = [["üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"], ["üí≥ –ë–∞–ª–∞–Ω—Å", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"], ["üí∞ –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"]]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é "
        "**Nano Banana (Google Gemini 2.5 Flash)**.\n\n"
        f"‚ú® –£ —Ç–µ–±—è {balance} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
        "‚ö° –î–ª—è –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç Google Gemini (Nano Banana).\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å–Ω–∏–∑—É."
    )

    await update.message.reply_text(
        text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True),
    )


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(
        f"üí≥ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
        "–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –ù–∞–∂–º–∏—Ç–µ ¬´üí∞ –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏¬ª."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø –ø–æ–º–æ–≥—É —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "–ü–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏:\n"
        "‚Äî ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç¬ª\n"
        "‚Äî ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üí∞ –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏¬ª.",
        parse_mode="Markdown",
    )


# -----------------------------
# –ü–û–ö–£–ü–ö–ê –ó–í–Å–ó–î–ê–ú–ò
# -----------------------------
PACKAGES = {
    "pack10": {"label": "10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", "amount": 40000, "generations": 10},   # 40‚≠ê
    "pack50": {"label": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", "amount": 200000, "generations": 50},  # 200‚≠ê
    "pack100": {"label": "100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", "amount": 400000, "generations": 100},  # 400‚≠ê
}


async def buy_generations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ú® 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_pack10")],
            [InlineKeyboardButton("‚ö° 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_pack50")],
            [InlineKeyboardButton("üöÄ 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_pack100")],
        ]
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=keyboard)


async def buy_package_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pack_id = query.data.replace("buy_", "")

    if pack_id not in PACKAGES:
        await query.edit_message_text("‚ö†Ô∏è –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    package = PACKAGES[pack_id]

    prices = [LabeledPrice(label=package["label"], amount=package["amount"])]

    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title="–ü–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        description=f"{package['label']} –¥–ª—è –±–æ—Ç–∞",
        payload=pack_id,
        provider_token="",  # –¥–ª—è Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",
        prices=prices,
    )


async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)


async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payload = update.message.successful_payment.invoice_payload

    if payload in PACKAGES:
        gens = PACKAGES[payload]["generations"]
        update_balance(user_id, gens)
        await update.message.reply_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
            f"üí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {get_balance(user_id)} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.",
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True),
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# -----------------------------
# –ì–ï–ù–ï–†–ê–¶–ò–Ø (—É–∫–æ—Ä–æ—á–µ–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
# -----------------------------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)

    if balance <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    prompt = update.message.text
    wait_msg = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")

    try:
        output = replicate.run(
            "google/nano-banana",
            input={"prompt": prompt},
        )

        image_url = output[0]
        save_last_image(user_id, image_url)
        update_balance(user_id, -1)

        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="regen")],
                [InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="end")],
            ]
        )

        await update.message.reply_photo(
            image_url,
            caption="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë",
            reply_markup=keyboard,
        )
    finally:
        await wait_msg.delete()


# -----------------------------
# MAIN
# -----------------------------
def main():
    init_db()
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("help", help_command))

    # –ü–æ–∫—É–ø–∫–∏
    app.add_handler(MessageHandler(filters.Regex("–ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"), buy_generations))
    app.add_handler(CallbackQueryHandler(buy_package_callback, pattern="^buy_"))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        url_path=TELEGRAM_BOT_TOKEN,
        webhook_url=f"{os.environ.get('RENDER_EXTERNAL_URL')}/{TELEGRAM_BOT_TOKEN}",
    )


if __name__ == "__main__":
    main()
