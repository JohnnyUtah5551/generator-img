import logging
import os
import replicate
import requests
from deep_translator import GoogleTranslator
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, LabeledPrice
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler,
    filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
RENDER_URL = os.getenv("RENDER_URL", "https://generator-img-1.onrender.com")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook")

# –ö–ª–∏–µ–Ω—Ç Replicate
os.environ["REPLICATE_API_TOKEN"] = REPLICATE_API_KEY

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
user_balances = {}  # {user_id: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π}
user_freebies = {}  # {user_id: —Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ}
user_photos = {}    # {user_id: [—Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ]}
FREE_GENERATIONS = 3

# Inline –º–µ–Ω—é
main_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
    [InlineKeyboardButton("üñº –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="buy")]
])

back_menu = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
])


# ==========================
# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ==========================
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π "
        "—Å –ø–æ–º–æ—â—å—é **Google Gemini 2.5 Flash ‚Äî Nano Banana üçå**.\n\n"
        "‚ö° Nano Banana ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.\n\n"
        "‚ú® –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_menu,
        parse_mode="Markdown"
    )


async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "generate":
        user_photos[user_id] = []
        await query.edit_message_text(
            "üì∏ –ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥–æ 4 —Ñ–æ—Ç–æ (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏), —á—Ç–æ–±—ã —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
            reply_markup=back_menu
        )
    elif query.data == "balance":
        balance = user_balances.get(user_id, 0)
        freebies_used = user_freebies.get(user_id, 0)
        free_left = max(0, FREE_GENERATIONS - freebies_used)
        await query.edit_message_text(
            f"üí≥ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:\n"
            f"‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {free_left}\n"
            f"‚Äî –ö—É–ø–ª–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {balance}\n\n",
            reply_markup=main_menu
        )
    elif query.data == "buy":
        keyboard = [
            [InlineKeyboardButton("‚ú® 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10")],
            [InlineKeyboardButton("üí´ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50")],
            [InlineKeyboardButton("üöÄ 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif query.data == "menu":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu)


# ==========================
# üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
# ==========================
async def handle_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if not await check_and_decrement_balance(update, user_id):
        return

    try:
        prompt = GoogleTranslator(source="auto", target="en").translate(text)
    except Exception:
        prompt = text

    await update.message.reply_text("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")

    try:
        output = replicate.run(
            "google/nano-banana:8b5d8483cbb4e72c772b9477d5193a004d19c7a95d24e30f7110e2c735023d4e",
            input={"prompt": prompt}
        )
        if output:
            await update.message.reply_photo(photo=output[0], reply_markup=back_menu)
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=back_menu
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç): {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=back_menu
        )


async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    photos = update.message.photo

    file = await context.bot.get_file(photos[-1].file_id)
    url = file.file_path

    user_photos.setdefault(user_id, []).append(url)

    if len(user_photos[user_id]) >= 4:
        await generate_with_photos(update, context, user_id)
    else:
        await update.message.reply_text(
            f"üì∏ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ({len(user_photos[user_id])}/4).\n"
            f"–û—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=back_menu
        )


async def generate_with_photos(update: Update, context: CallbackContext, user_id: int):
    if not await check_and_decrement_balance(update, user_id):
        return

    await update.message.reply_text("‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ, –ø–æ–¥–æ–∂–¥–∏...")

    try:
        output = replicate.run(
            "google/nano-banana:8b5d8483cbb4e72c772b9477d5193a004d19c7a95d24e30f7110e2c735023d4e",
            input={"image": user_photos[user_id]}
        )
        if output:
            media = [InputMediaPhoto(img) for img in output]
            await update.message.reply_media_group(media)
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=back_menu)
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=back_menu
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ñ–æ—Ç–æ): {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=back_menu
        )
    finally:
        user_photos[user_id] = []


# ==========================
# üìå –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–∫—É–ø–∫–∏
# ==========================
async def check_and_decrement_balance(update: Update, user_id: int) -> bool:
    freebies_used = user_freebies.get(user_id, 0)
    if freebies_used < FREE_GENERATIONS:
        user_freebies[user_id] = freebies_used + 1
        return True

    balance = user_balances.get(user_id, 0)
    if balance > 0:
        user_balances[user_id] = balance - 1
        return True

    await update.message.reply_text(
        "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
        "–ö—É–ø–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤ –º–µ–Ω—é ‚≠ê –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
        reply_markup=main_menu
    )
    return False


async def successful_payment(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    payload = update.message.successful_payment.invoice_payload

    if payload == "buy_10":
        user_balances[user_id] = user_balances.get(user_id, 0) + 10
    elif payload == "buy_50":
        user_balances[user_id] = user_balances.get(user_id, 0) + 50
    elif payload == "buy_100":
        user_balances[user_id] = user_balances.get(user_id, 0) + 100

    await update.message.reply_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu)


# ==========================
# üìå –ó–∞–ø—É—Å–∫
# ==========================
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    application.run_webhook(
        listen="0.0.0.0",
        port=5000,
        url_path=TELEGRAM_BOT_TOKEN,
        webhook_url=f"{RENDER_URL}/{TELEGRAM_BOT_TOKEN}"
    )


if __name__ == "__main__":
    main()

