import os
import logging
import replicate
from deep_translator import GoogleTranslator
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï -----------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_KEY = os.getenv("REPLICATE_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
RENDER_URL = os.getenv("RENDER_URL")

replicate.Client(api_token=REPLICATE_API_KEY)

FREE_GENERATIONS = 3
user_data = {}

# ----------------- –ö–ù–û–ü–ö–ò -----------------
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="buy")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    return InlineKeyboardMarkup(keyboard)


def buy_menu():
    keyboard = [
        [InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 40‚≠ê", callback_data="buy_10")],
        [InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 200‚≠ê", callback_data="buy_50")],
        [InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ‚Äî 400‚≠ê", callback_data="buy_100")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    return InlineKeyboardMarkup(keyboard)


def after_generation_menu():
    keyboard = [
        [
            InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat"),
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# ----------------- –•–ï–ù–î–õ–ï–†–´ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = {"balance": FREE_GENERATIONS, "last_images": [], "last_prompt": None}

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é "
        "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Nano Banana (Google Gemini 2.5 Flash‚ö°Ô∏è) ‚Äî –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π "
        "–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "‚ú® –£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é, "
        "—á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )

    await update.message.reply_text(text, reply_markup=main_menu())


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if data == "generate":
        await query.message.reply_text(
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ.\n\n"
            "–î–ª—è –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç Google Gemini 2.5 Flash ‚Äî –æ–Ω–∞ –∂–µ Nano Banana üçå\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, "
            "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"
        )
        await query.message.delete()

    elif data == "balance":
        balance = user_data.get(user_id, {}).get("balance", 0)
        await query.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")

    elif data == "buy":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=buy_menu())

    elif data == "back":
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif data.startswith("buy_"):
        await query.message.reply_text("‚ö° –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    elif data == "help":
        await query.message.reply_text(
            "‚ùì –ü–æ–º–æ—â—å\n\n"
            "‚Äî –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "‚Äî –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 4 —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å.\n"
            "‚Äî –£ –≤–∞—Å –µ—Å—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–∞–ª–µ–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å ‚≠ê."
        )

    elif data == "repeat":
        last_images = user_data[user_id].get("last_images")
        last_prompt = user_data[user_id].get("last_prompt")
        if last_prompt:
            await generate_image(query, context, last_prompt, last_images)

    elif data == "finish":
        await query.message.reply_text("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu())


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    prompt = update.message.text

    await generate_image(update, context, prompt)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photos = update.message.photo

    if not photos:
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    file_ids = [p.file_id for p in photos[-4:]]
    user_data[user_id]["last_images"] = file_idsimport logging
import os
import replicate
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    LabeledPrice,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ParseMode

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")  # Telegram Stars

# –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (id -> –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
user_balances = {}

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
user_sessions = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="buy")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    return InlineKeyboardMarkup(keyboard)


# --- –°—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 3

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ "
        "*Nano Banana (Google Gemini 2.5 Flash ‚ö°)* ‚Äî –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\n"
        "‚ú® –£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é, "
        "—á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )

    await update.message.reply_text(text, reply_markup=main_menu(), parse_mode=ParseMode.MARKDOWN)


# --- –ü–æ–º–æ—â—å ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.\n\n"
        "–ó–∞—Ç–µ–º:\n"
        "‚Äî –û—Ç–ø—Ä–∞–≤—å –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
        "‚Äî –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤—ã–±–æ—Ä: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.\n\n"
        "üí° –£ —Ç–µ–±—è 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –¥–∞–ª—å—à–µ –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Telegram Stars."
    )
    await update.callback_query.message.edit_text(text, reply_markup=main_menu())


# --- –ë–∞–ª–∞–Ω—Å ---
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = user_balances.get(user_id, 0)
    await update.callback_query.message.edit_text(
        f"üí∞ –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.", reply_markup=main_menu()
    )


# --- –ü–æ–∫—É–ø–∫–∞ ---
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚≠ê 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = 100 Stars", callback_data="buy_10")],
        [InlineKeyboardButton("‚≠ê 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = 400 Stars", callback_data="buy_50")],
        [InlineKeyboardButton("‚≠ê 100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π = 700 Stars", callback_data="buy_100")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ]
    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ ---
async def buy_generations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    packages = {
        "buy_10": (10, 100),
        "buy_50": (50, 400),
        "buy_100": (100, 700),
    }

    if query.data in packages:
        gens, price = packages[query.data]

        prices = [LabeledPrice(label=f"{gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", amount=price)]
        await context.bot.send_invoice(
            chat_id=user_id,
            title=f"–ü–∞–∫–µ—Ç {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
            payload=f"buy_{gens}",
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="XTR",  # Telegram Stars
            prices=prices,
            start_parameter=f"buy-{gens}",
        )


# --- –ü—Ä–µ–¥—á–µ–∫–∞—É—Ç ---
async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)


# --- –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ---
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payload = update.message.successful_payment.invoice_payload

    packages = {
        "buy_10": 10,
        "buy_50": 50,
        "buy_100": 100,
    }

    if payload in packages:
        gens = packages[payload]
        user_balances[user_id] = user_balances.get(user_id, 0) + gens
        await update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
            f"üí∞ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user_balances[user_id]} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.",
            reply_markup=main_menu(),
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback ---
async def handle_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    if query.data == "generate":
        await query.message.edit_text(
            "üì© –ü—Ä–∏—à–ª–∏ –æ—Ç 1 –¥–æ 4 —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            ),
        )
    elif query.data == "balance":
        await balance(update, context)
    elif query.data == "buy":
        await buy(update, context)
    elif query.data in ["buy_10", "buy_50", "buy_100"]:
        await buy_generations(update, context)
    elif query.data == "help":
        await help_command(update, context)
    elif query.data == "main_menu":
        await query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user_balances.get(user_id, 0) <= 0:
        await message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=main_menu(),
        )
        return

    description = message.caption if message.photo else message.text
    photos = message.photo[-4:] if message.photo else []

    if not description:
        await message.reply_text("‚úçÔ∏è –î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ.")
        return

    await message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        output = replicate.run(
            "google/nano-banana",
            input={"prompt": description},
        )

        if isinstance(output, list):
            image_url = output[0]
        else:
            image_url = output

        user_balances[user_id] -= 1

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="generate"),
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="main_menu"),
            ]
        ]

        await message.reply_photo(
            photo=image_url,
            caption=(
                f"‚ú® –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
                f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_balances[user_id]}"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    except Exception as e:
        logger.error(e)
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callbacks))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))

    # –û–ø–ª–∞—Ç–∞
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(
        MessageHandler(filters.StatusUpdate.PRE_CHECKOUT_QUERY, precheckout)
    )

    app.run_polling()


if __name__ == "__main__":
    main()

