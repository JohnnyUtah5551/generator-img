import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import replicate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not TELEGRAM_TOKEN:
 print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
 exit(1)

if not REPLICATE_API_TOKEN:
 print("‚ùå –û—à–∏–±–∫–∞: REPLICATE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
 exit(1)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω Replicate
replicate.Client(api_token=REPLICATE_API_TOKEN)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
 await update.message.reply_text("UsageId: /generate –≤–∞—à –∑–∞–ø—Ä–æ—Å")

# –ö–æ–º–∞–Ω–¥–∞ /generate
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
 prompt = " ".join(context.args)
 if not prompt:
 await update.message.reply_text("UsageId: /generate –∫–∏–±–µ—Ä–ø–∞–Ω–∫-–≥–æ—Ä–æ–¥ –Ω–æ—á—å—é")
 return

 await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –∑–∞–π–º—ë—Ç 10‚Äì20 —Å–µ–∫—É–Ω–¥.")

 try:
 output = replicate.run(
 "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c71116187a96637a03f7799ec3442e5fb9f",
 input={"prompt": prompt}
 )
 await update.message.reply_photo(photo=output0)
 except Exception as e:
 await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if name == "main":
 app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

 app.add_handler(CommandHandler("start", start))
 app.add_handler(CommandHandler("generate", generate))

 print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
 app.run_polling()

