import logging
import os
import sqlite3
import replicate

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# -----------------------------
# –õ–û–ì–ò
# -----------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# -----------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# -----------------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

replicate.Client(api_token=REPLICATE_API_TOKEN)

DB_PATH = "bot.db"

# -----------------------------
# –ë–î
# -----------------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        """CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 3,
                last_image_url TEXT
            )"""
    )
    conn.commit()
    conn.close()


def get_balance(user_id: int) -> int:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    if not row:
        c.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 3))
        conn.commit()
        balance = 3
    else:
        balance = row[0]
    conn.close()
    return balance


def update_balance(user_id: int, delta: int):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (delta, user_id))
    conn.commit()
    conn.close()


def save_last_image(user_id: int, url: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET last_image_url=? WHERE user_id=?", (url, user_id))
    conn.commit()
    conn.close()


def get_last_image(user_id: int) -> str | None:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT last_image_url FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row and row[0] else None


# -----------------------------
# –•–≠–ù–î–õ–ï–†–´
# -----------------------------
MAIN_MENU = [["üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"], ["üí≥ –ë–∞–ª–∞–Ω—Å", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é "
        "**Nano Banana (Google Gemini 2.5 Flash)** ‚Äî –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        f"‚ú® –£ —Ç–µ–±—è {balance} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
        "‚ö° –î–ª—è –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç Google Gemini (Nano Banana).\n\n"
        "**–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å,\n"
        "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å."
    )

    await update.message.reply_text(
        text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True),
    )


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)
    await update.message.reply_text(f"üí≥ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –Ø –ø–æ–º–æ–≥—É —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "–ü–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏:\n"
        "‚Äî ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç¬ª\n"
        "‚Äî ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é¬ª\n\n"
        "‚úèÔ∏è *–ò–∑–º–µ–Ω–∏—Ç—å*: –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –æ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.",
        parse_mode="Markdown",
    )


# -----------------------------
# –ì–ï–ù–ï–†–ê–¶–ò–Ø
# -----------------------------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)

    if balance <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    last_image = get_last_image(user_id)
    prompt = update.message.text

    wait_msg = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")

    try:
        if last_image and context.user_data.get("modify_mode", False):
            output = replicate.run(
                "google/nano-banana",
                input={"prompt": prompt, "image": last_image},
            )
        else:
            output = replicate.run(
                "google/nano-banana",
                input={"prompt": prompt},
            )

        image_url = output[0]
        save_last_image(user_id, image_url)
        update_balance(user_id, -1)

        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="regen")],
                [InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="end")],
            ]
        )

        await update.message.reply_photo(
            image_url,
            caption="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë",
            reply_markup=keyboard,
        )
    finally:
        await wait_msg.delete()


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)
    if balance <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    photos = update.message.photo
    if not photos:
        return

    caption = update.message.caption

    if caption:
        wait_msg = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        try:
            output = replicate.run(
                "google/nano-banana",
                input={"prompt": caption, "image": photos[-1].get_file().file_path},
            )
            image_url = output[0]
            save_last_image(user_id, image_url)
            update_balance(user_id, -1)

            keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="regen")],
                    [InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="end")],
                ]
            )

            await update.message.reply_photo(
                image_url,
                caption="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë",
                reply_markup=keyboard,
            )
        finally:
            await wait_msg.delete()
    else:
        await update.message.reply_text("üì∏ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        context.user_data["pending_photo"] = photos[-1].get_file().file_path


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "regen":
        last_image = get_last_image(user_id)
        if not last_image:
            await query.edit_message_caption("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            return

        wait_msg = await query.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        try:
            output = replicate.run(
                "google/nano-banana",
                input={"image": last_image},
            )
            image_url = output[0]
            save_last_image(user_id, image_url)
            update_balance(user_id, -1)

            keyboard = InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="regen")],
                    [InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="end")],
                ]
            )

            await query.message.reply_photo(
                image_url,
                caption="‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë",
                reply_markup=keyboard,
            )
        finally:
            await wait_msg.delete()

    elif query.data == "end":
        await query.message.reply_text("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))


# -----------------------------
# MAIN
# -----------------------------
def main():
    init_db()
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("help", help_command))

    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        url_path=TELEGRAM_BOT_TOKEN,
        webhook_url=f"{os.environ.get('RENDER_EXTERNAL_URL')}/{TELEGRAM_BOT_TOKEN}",
    )


if __name__ == "__main__":
    main()




