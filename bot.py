import os
import logging
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import replicate

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RENDER_URL = os.getenv("RENDER_URL")
PORT = int(os.environ.get("PORT", 5000))
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

# ====== –°—Ç–∞—Ä—Ç ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_sessions[user_id] = {"step": "main"}
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="start_generation")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 10", callback_data="buy_10")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 50", callback_data="buy_50")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 100", callback_data="buy_100")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ Nano Banana üçå. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ======
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "start_generation":
        user_sessions[user_id] = {"step": "waiting_prompt"}
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üé®")

    elif query.data == "retry":
        session = user_sessions.get(user_id, {})
        if "last_prompt" in session:
            await generate_image(user_id, context, session["last_prompt"], query)
        else:
            await query.edit_message_text("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")

    elif query.data == "finish":
        user_sessions[user_id] = {"step": "main"}
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="start_generation")],
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 10", callback_data="buy_10")],
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 50", callback_data="buy_50")],
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 100", callback_data="buy_100")]
        ]
        await query.edit_message_text(
            "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ. –í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data in ["buy_10", "buy_50", "buy_100"]:
        await query.edit_message_text(f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}")

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id, {})

    if session.get("step") == "waiting_prompt":
        prompt = update.message.text
        session["last_prompt"] = prompt
        await generate_image(user_id, context, prompt, update.message)

async def generate_image(user_id, context, prompt, reply_target):
    try:
        await context.bot.send_message(chat_id=user_id, text="–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... ‚è≥")

        output = replicate.run(
            "google/nano-banana:22db62aaf4b98d4aef5da3e8ad9412601d109e22693f8e1f09143b52a55d2f46",
            input={"prompt": prompt}
        )

        if isinstance(output, list):
            image_url = output[0]
        else:
            image_url = output

        keyboard = [
            [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")]
        ]
        await context.bot.send_photo(
            chat_id=user_id,
            photo=image_url,
            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n`{prompt}`",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ====== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ======
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏ –¥–ª—è Render
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"{RENDER_URL}/{TOKEN}"
    )

if __name__ == "__main__":
    main()
